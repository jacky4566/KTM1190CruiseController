
LEDTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090dc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009268  08009268  00019268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f0  080092f0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  080092f0  080092f0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092f0  080092f0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092f0  080092f0  000192f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092f4  080092f4  000192f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080092f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001064  200001f4  080094ec  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  080094ec  00021258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aac9  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003560  00000000  00000000  0003aced  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  0003e250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f58  00000000  00000000  0003f340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002725f  00000000  00000000  00040298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000114a2  00000000  00000000  000674f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4b9a  00000000  00000000  00078999  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d533  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045bc  00000000  00000000  0015d5b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009250 	.word	0x08009250

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	08009250 	.word	0x08009250

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fba4 	bl	800091e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f867 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f9ab 	bl	8000534 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001de:	f008 f9bd 	bl	800855c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80001e2:	f000 f8dd 	bl	80003a0 <MX_ADC1_Init>
  MX_DAC1_Init();
 80001e6:	f000 f93f 	bl	8000468 <MX_DAC1_Init>
  MX_RTC_Init();
 80001ea:	f000 f97b 	bl	80004e4 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, 1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	4828      	ldr	r0, [pc, #160]	; (8000298 <main+0xcc>)
 80001f6:	f001 fe7f 	bl	8001ef8 <HAL_GPIO_WritePin>
	  strcpy(buffer,"B\r\n");
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4a27      	ldr	r2, [pc, #156]	; (800029c <main+0xd0>)
 80001fe:	601a      	str	r2, [r3, #0]
	  CDC_Transmit_FS(buffer, sizeof(buffer));
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2114      	movs	r1, #20
 8000204:	4618      	mov	r0, r3
 8000206:	f008 fa67 	bl	80086d8 <CDC_Transmit_FS>
	  HAL_Delay(500);
 800020a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020e:	f000 f9d1 	bl	80005b4 <HAL_Delay>
	  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	481f      	ldr	r0, [pc, #124]	; (8000298 <main+0xcc>)
 800021a:	f001 fe6d 	bl	8001ef8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800021e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000222:	f000 f9c7 	bl	80005b4 <HAL_Delay>

	  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 1);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022c:	481a      	ldr	r0, [pc, #104]	; (8000298 <main+0xcc>)
 800022e:	f001 fe63 	bl	8001ef8 <HAL_GPIO_WritePin>
	  strcpy(buffer,"R\r\n");
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <main+0xd4>)
 8000236:	601a      	str	r2, [r3, #0]
	  CDC_Transmit_FS(buffer, sizeof(buffer));
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2114      	movs	r1, #20
 800023c:	4618      	mov	r0, r3
 800023e:	f008 fa4b 	bl	80086d8 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000246:	f000 f9b5 	bl	80005b4 <HAL_Delay>
	  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0);
 800024a:	2200      	movs	r2, #0
 800024c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000250:	4811      	ldr	r0, [pc, #68]	; (8000298 <main+0xcc>)
 8000252:	f001 fe51 	bl	8001ef8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025a:	f000 f9ab 	bl	80005b4 <HAL_Delay>

	  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <main+0xcc>)
 8000266:	f001 fe47 	bl	8001ef8 <HAL_GPIO_WritePin>
	  strcpy(buffer,"G\r\n");
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <main+0xd8>)
 800026e:	601a      	str	r2, [r3, #0]
	  CDC_Transmit_FS(buffer, sizeof(buffer));
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2114      	movs	r1, #20
 8000274:	4618      	mov	r0, r3
 8000276:	f008 fa2f 	bl	80086d8 <CDC_Transmit_FS>
	  HAL_Delay(500);
 800027a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800027e:	f000 f999 	bl	80005b4 <HAL_Delay>
	  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000288:	4803      	ldr	r0, [pc, #12]	; (8000298 <main+0xcc>)
 800028a:	f001 fe35 	bl	8001ef8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800028e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000292:	f000 f98f 	bl	80005b4 <HAL_Delay>
  {
 8000296:	e7aa      	b.n	80001ee <main+0x22>
 8000298:	48000400 	.word	0x48000400
 800029c:	000a0d42 	.word	0x000a0d42
 80002a0:	000a0d52 	.word	0x000a0d52
 80002a4:	000a0d47 	.word	0x000a0d47

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b0ae      	sub	sp, #184	; 0xb8
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002b2:	2244      	movs	r2, #68	; 0x44
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f008 ff08 	bl	80090cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	463b      	mov	r3, r7
 80002ce:	2260      	movs	r2, #96	; 0x60
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f008 fefa 	bl	80090cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80002d8:	232a      	movs	r3, #42	; 0x2a
 80002da:	677b      	str	r3, [r7, #116]	; 0x74
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002e4:	2301      	movs	r3, #1
 80002e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	2340      	movs	r3, #64	; 0x40
 80002ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002f0:	2301      	movs	r3, #1
 80002f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f6:	2302      	movs	r3, #2
 80002f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fc:	2302      	movs	r3, #2
 80002fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000302:	2301      	movs	r3, #1
 8000304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000308:	2308      	movs	r3, #8
 800030a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800030e:	2307      	movs	r3, #7
 8000310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800031a:	2302      	movs	r3, #2
 800031c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000324:	4618      	mov	r0, r3
 8000326:	f003 fa09 	bl	800373c <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000330:	f000 f964 	bl	80005fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2303      	movs	r3, #3
 800033a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000348:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800034c:	2103      	movs	r1, #3
 800034e:	4618      	mov	r0, r3
 8000350:	f003 fe14 	bl	8003f7c <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800035a:	f000 f94f 	bl	80005fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
 800035e:	f44f 3318 	mov.w	r3, #155648	; 0x26000
 8000362:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000364:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000368:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800036a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800036e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000370:	2300      	movs	r3, #0
 8000372:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000374:	463b      	mov	r3, r7
 8000376:	4618      	mov	r0, r3
 8000378:	f003 ffcc 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000382:	f000 f93b 	bl	80005fc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000386:	f44f 7000 	mov.w	r0, #512	; 0x200
 800038a:	f003 f971 	bl	8003670 <HAL_PWREx_ControlVoltageScaling>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000394:	f000 f932 	bl	80005fc <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	37b8      	adds	r7, #184	; 0xb8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003a6:	463b      	mov	r3, r7
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
 80003b4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b6:	4b29      	ldr	r3, [pc, #164]	; (800045c <MX_ADC1_Init+0xbc>)
 80003b8:	4a29      	ldr	r2, [pc, #164]	; (8000460 <MX_ADC1_Init+0xc0>)
 80003ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003bc:	4b27      	ldr	r3, [pc, #156]	; (800045c <MX_ADC1_Init+0xbc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003c2:	4b26      	ldr	r3, [pc, #152]	; (800045c <MX_ADC1_Init+0xbc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c8:	4b24      	ldr	r3, [pc, #144]	; (800045c <MX_ADC1_Init+0xbc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ce:	4b23      	ldr	r3, [pc, #140]	; (800045c <MX_ADC1_Init+0xbc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003d4:	4b21      	ldr	r3, [pc, #132]	; (800045c <MX_ADC1_Init+0xbc>)
 80003d6:	2204      	movs	r2, #4
 80003d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003da:	4b20      	ldr	r3, [pc, #128]	; (800045c <MX_ADC1_Init+0xbc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <MX_ADC1_Init+0xbc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80003e6:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_ADC1_Init+0xbc>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_ADC1_Init+0xbc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_ADC1_Init+0xbc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_ADC1_Init+0xbc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <MX_ADC1_Init+0xbc>)
 8000402:	2200      	movs	r2, #0
 8000404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_ADC1_Init+0xbc>)
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800040e:	4b13      	ldr	r3, [pc, #76]	; (800045c <MX_ADC1_Init+0xbc>)
 8000410:	2200      	movs	r2, #0
 8000412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000416:	4811      	ldr	r0, [pc, #68]	; (800045c <MX_ADC1_Init+0xbc>)
 8000418:	f000 fc82 	bl	8000d20 <HAL_ADC_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000422:	f000 f8eb 	bl	80005fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_ADC1_Init+0xc4>)
 8000428:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042a:	2306      	movs	r3, #6
 800042c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800042e:	2300      	movs	r3, #0
 8000430:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000432:	237f      	movs	r3, #127	; 0x7f
 8000434:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000436:	2304      	movs	r3, #4
 8000438:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043e:	463b      	mov	r3, r7
 8000440:	4619      	mov	r1, r3
 8000442:	4806      	ldr	r0, [pc, #24]	; (800045c <MX_ADC1_Init+0xbc>)
 8000444:	f000 fdb2 	bl	8000fac <HAL_ADC_ConfigChannel>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800044e:	f000 f8d5 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000234 	.word	0x20000234
 8000460:	50040000 	.word	0x50040000
 8000464:	14f00020 	.word	0x14f00020

08000468 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	; 0x28
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2224      	movs	r2, #36	; 0x24
 8000472:	2100      	movs	r1, #0
 8000474:	4618      	mov	r0, r3
 8000476:	f008 fe29 	bl	80090cc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800047a:	4b18      	ldr	r3, [pc, #96]	; (80004dc <MX_DAC1_Init+0x74>)
 800047c:	4a18      	ldr	r2, [pc, #96]	; (80004e0 <MX_DAC1_Init+0x78>)
 800047e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000480:	4816      	ldr	r0, [pc, #88]	; (80004dc <MX_DAC1_Init+0x74>)
 8000482:	f001 fa82 	bl	800198a <HAL_DAC_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800048c:	f000 f8b6 	bl	80005fc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000490:	2300      	movs	r3, #0
 8000492:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000494:	2300      	movs	r3, #0
 8000496:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	4619      	mov	r1, r3
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_DAC1_Init+0x74>)
 80004ac:	f001 fa8f 	bl	80019ce <HAL_DAC_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80004b6:	f000 f8a1 	bl	80005fc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2210      	movs	r2, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_DAC1_Init+0x74>)
 80004c6:	f001 fa82 	bl	80019ce <HAL_DAC_ConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 80004d0:	f000 f894 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	3728      	adds	r7, #40	; 0x28
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000220 	.word	0x20000220
 80004e0:	40007400 	.word	0x40007400

080004e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <MX_RTC_Init+0x48>)
 80004ea:	4a11      	ldr	r2, [pc, #68]	; (8000530 <MX_RTC_Init+0x4c>)
 80004ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_RTC_Init+0x48>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <MX_RTC_Init+0x48>)
 80004f6:	227f      	movs	r2, #127	; 0x7f
 80004f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_RTC_Init+0x48>)
 80004fc:	22ff      	movs	r2, #255	; 0xff
 80004fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <MX_RTC_Init+0x48>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_RTC_Init+0x48>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <MX_RTC_Init+0x48>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_RTC_Init+0x48>)
 8000514:	2200      	movs	r2, #0
 8000516:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <MX_RTC_Init+0x48>)
 800051a:	f004 fa2f 	bl	800497c <HAL_RTC_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000524:	f000 f86a 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000298 	.word	0x20000298
 8000530:	40002800 	.word	0x40002800

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_GPIO_Init+0x78>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <MX_GPIO_Init+0x78>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_GPIO_Init+0x78>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_GPIO_Init+0x78>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4a11      	ldr	r2, [pc, #68]	; (80005ac <MX_GPIO_Init+0x78>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_GPIO_Init+0x78>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin|LEDR_Pin|LEDG_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <MX_GPIO_Init+0x7c>)
 8000582:	f001 fcb9 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDB_Pin LEDR_Pin LEDG_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDR_Pin|LEDG_Pin;
 8000586:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	4619      	mov	r1, r3
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_GPIO_Init+0x7c>)
 80005a0:	f001 fb30 	bl	8001c04 <HAL_GPIO_Init>

}
 80005a4:	bf00      	nop
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	48000400 	.word	0x48000400

080005b4 <HAL_Delay>:

/* USER CODE BEGIN 4 */
void HAL_Delay(uint32_t Delay)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f000 fa18 	bl	80009f0 <HAL_GetTick>
 80005c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005cc:	d007      	beq.n	80005de <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_Delay+0x44>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4413      	add	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005da:	e000      	b.n	80005de <HAL_Delay+0x2a>
  {
	  __WFI();
 80005dc:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80005de:	f000 fa07 	bl	80009f0 <HAL_GetTick>
 80005e2:	4602      	mov	r2, r0
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d8f6      	bhi.n	80005dc <HAL_Delay+0x28>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000008 	.word	0x20000008

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_MspInit+0x44>)
 8000614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_MspInit+0x44>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6613      	str	r3, [r2, #96]	; 0x60
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_MspInit+0x44>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_MspInit+0x44>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062e:	4a08      	ldr	r2, [pc, #32]	; (8000650 <HAL_MspInit+0x44>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	6593      	str	r3, [r2, #88]	; 0x58
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_MspInit+0x44>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x74>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d124      	bne.n	80006c0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <HAL_ADC_MspInit+0x78>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a14      	ldr	r2, [pc, #80]	; (80006cc <HAL_ADC_MspInit+0x78>)
 800067c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_ADC_MspInit+0x78>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <HAL_ADC_MspInit+0x78>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_ADC_MspInit+0x78>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <HAL_ADC_MspInit+0x78>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_VREFA_Pin|ADC_VREFB_Pin;
 80006a6:	2309      	movs	r3, #9
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006aa:	230b      	movs	r3, #11
 80006ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f001 faa2 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	; 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	50040000 	.word	0x50040000
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a15      	ldr	r2, [pc, #84]	; (8000744 <HAL_DAC_MspInit+0x74>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d124      	bne.n	800073c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_DAC_MspInit+0x78>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <HAL_DAC_MspInit+0x78>)
 80006f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80006fc:	6593      	str	r3, [r2, #88]	; 0x58
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_DAC_MspInit+0x78>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_DAC_MspInit+0x78>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_DAC_MspInit+0x78>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_DAC_MspInit+0x78>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000722:	2330      	movs	r3, #48	; 0x30
 8000724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000726:	2303      	movs	r3, #3
 8000728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f001 fa64 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40007400 	.word	0x40007400
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_RTC_MspInit+0x30>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d107      	bne.n	800076e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_RTC_MspInit+0x34>)
 8000760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_RTC_MspInit+0x34>)
 8000766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800076a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40002800 	.word	0x40002800
 8000780:	40021000 	.word	0x40021000

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f8f6 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <USB_IRQHandler+0x10>)
 80007e6:	f001 fcd3 	bl	8002190 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000f60 	.word	0x20000f60

080007f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <_sbrk+0x5c>)
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <_sbrk+0x60>)
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <_sbrk+0x64>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <_sbrk+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	429a      	cmp	r2, r3
 8000822:	d207      	bcs.n	8000834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000824:	f008 fc18 	bl	8009058 <__errno>
 8000828:	4602      	mov	r2, r0
 800082a:	230c      	movs	r3, #12
 800082c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	e009      	b.n	8000848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_sbrk+0x64>)
 8000844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20010000 	.word	0x20010000
 8000854:	00000400 	.word	0x00000400
 8000858:	20000210 	.word	0x20000210
 800085c:	20001258 	.word	0x20001258

08000860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <SystemInit+0x64>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <SystemInit+0x64>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <SystemInit+0x68>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <SystemInit+0x68>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <SystemInit+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <SystemInit+0x68>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <SystemInit+0x68>)
 800088c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000890:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000894:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <SystemInit+0x68>)
 8000898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <SystemInit+0x68>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <SystemInit+0x68>)
 80008a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <SystemInit+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <SystemInit+0x64>)
 80008b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008b6:	609a      	str	r2, [r3, #8]
#endif
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	40021000 	.word	0x40021000

080008cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000904 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d0:	f7ff ffc6 	bl	8000860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008d6:	e003      	b.n	80008e0 <LoopCopyDataInit>

080008d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008de:	3104      	adds	r1, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008e0:	480a      	ldr	r0, [pc, #40]	; (800090c <LoopForever+0xa>)
	ldr	r3, =_edata
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008e8:	d3f6      	bcc.n	80008d8 <CopyDataInit>
	ldr	r2, =_sbss
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008ec:	e002      	b.n	80008f4 <LoopFillZerobss>

080008ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008f0:	f842 3b04 	str.w	r3, [r2], #4

080008f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <LoopForever+0x16>)
	cmp	r2, r3
 80008f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008f8:	d3f9      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fa:	f008 fbb3 	bl	8009064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008fe:	f7ff fc65 	bl	80001cc <main>

08000902 <LoopForever>:

LoopForever:
    b LoopForever
 8000902:	e7fe      	b.n	8000902 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000904:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000908:	080092f8 	.word	0x080092f8
	ldr	r0, =_sdata
 800090c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000910:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000914:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000918:	20001258 	.word	0x20001258

0800091c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC1_IRQHandler>

0800091e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 ffed 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800092e:	2000      	movs	r0, #0
 8000930:	f000 f80e 	bl	8000950 <HAL_InitTick>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d002      	beq.n	8000940 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	e001      	b.n	8000944 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000940:	f7ff fe64 	bl	800060c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000944:	79fb      	ldrb	r3, [r7, #7]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_InitTick+0x6c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d023      	beq.n	80009ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_InitTick+0x70>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_InitTick+0x6c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 fff9 	bl	8001972 <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10f      	bne.n	80009a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d809      	bhi.n	80009a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 ffc3 	bl	800191e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_InitTick+0x74>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
 800099e:	e007      	b.n	80009b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e004      	b.n	80009b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	73fb      	strb	r3, [r7, #15]
 80009aa:	e001      	b.n	80009b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	200002bc 	.word	0x200002bc

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200002bc 	.word	0x200002bc

08000a08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	609a      	str	r2, [r3, #8]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	431a      	orrs	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	609a      	str	r2, [r3, #8]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3360      	adds	r3, #96	; 0x60
 8000a82:	461a      	mov	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <LL_ADC_SetOffset+0x44>)
 8000a92:	4013      	ands	r3, r2
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000aa8:	bf00      	nop
 8000aaa:	371c      	adds	r7, #28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	03fff000 	.word	0x03fff000

08000ab8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3360      	adds	r3, #96	; 0x60
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b087      	sub	sp, #28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3360      	adds	r3, #96	; 0x60
 8000af4:	461a      	mov	r2, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	4413      	add	r3, r2
 8000afc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000b0e:	bf00      	nop
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b087      	sub	sp, #28
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	3330      	adds	r3, #48	; 0x30
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	4413      	add	r3, r2
 8000b38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	f003 031f 	and.w	r3, r3, #31
 8000b44:	211f      	movs	r1, #31
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	0e9b      	lsrs	r3, r3, #26
 8000b52:	f003 011f 	and.w	r1, r3, #31
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	f003 031f 	and.w	r3, r3, #31
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	431a      	orrs	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b66:	bf00      	nop
 8000b68:	371c      	adds	r7, #28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b087      	sub	sp, #28
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3314      	adds	r3, #20
 8000b82:	461a      	mov	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	0e5b      	lsrs	r3, r3, #25
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	4413      	add	r3, r2
 8000b90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	0d1b      	lsrs	r3, r3, #20
 8000b9a:	f003 031f 	and.w	r3, r3, #31
 8000b9e:	2107      	movs	r1, #7
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	0d1b      	lsrs	r3, r3, #20
 8000bac:	f003 031f 	and.w	r3, r3, #31
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000bbc:	bf00      	nop
 8000bbe:	371c      	adds	r7, #28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000be0:	43db      	mvns	r3, r3
 8000be2:	401a      	ands	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0318 	and.w	r3, r3, #24
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000bec:	40d9      	lsrs	r1, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	0007ffff 	.word	0x0007ffff

08000c10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	6093      	str	r3, [r2, #8]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c48:	d101      	bne.n	8000c4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000c98:	d101      	bne.n	8000c9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <LL_ADC_IsEnabled+0x18>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <LL_ADC_IsEnabled+0x1a>
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d101      	bne.n	8000cea <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d101      	bne.n	8000d10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e12a      	b.n	8000f90 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d109      	bne.n	8000d5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fc83 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff67 	bl	8000c34 <LL_ADC_IsDeepPowerDownEnabled>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d004      	beq.n	8000d76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff4d 	bl	8000c10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff82 	bl	8000c84 <LL_ADC_IsInternalRegulatorEnabled>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d113      	bne.n	8000dae <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff66 	bl	8000c5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000d90:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <HAL_ADC_Init+0x278>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	099b      	lsrs	r3, r3, #6
 8000d96:	4a81      	ldr	r2, [pc, #516]	; (8000f9c <HAL_ADC_Init+0x27c>)
 8000d98:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9c:	099b      	lsrs	r3, r3, #6
 8000d9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000da0:	e002      	b.n	8000da8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f9      	bne.n	8000da2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff66 	bl	8000c84 <LL_ADC_IsInternalRegulatorEnabled>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10d      	bne.n	8000dda <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc2:	f043 0210 	orr.w	r2, r3, #16
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	f043 0201 	orr.w	r2, r3, #1
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff77 	bl	8000cd2 <LL_ADC_REG_IsConversionOngoing>
 8000de4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 80c5 	bne.w	8000f7e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f040 80c1 	bne.w	8000f7e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e04:	f043 0202 	orr.w	r2, r3, #2
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff4b 	bl	8000cac <LL_ADC_IsEnabled>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10b      	bne.n	8000e34 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e1c:	4860      	ldr	r0, [pc, #384]	; (8000fa0 <HAL_ADC_Init+0x280>)
 8000e1e:	f7ff ff45 	bl	8000cac <LL_ADC_IsEnabled>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d105      	bne.n	8000e34 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	485d      	ldr	r0, [pc, #372]	; (8000fa4 <HAL_ADC_Init+0x284>)
 8000e30:	f7ff fdea 	bl	8000a08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7e5b      	ldrb	r3, [r3, #25]
 8000e38:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e3e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000e44:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000e4a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e52:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d106      	bne.n	8000e70 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	3b01      	subs	r3, #1
 8000e68:	045b      	lsls	r3, r3, #17
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d009      	beq.n	8000e8c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <HAL_ADC_Init+0x288>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	69b9      	ldr	r1, [r7, #24]
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff14 	bl	8000cd2 <LL_ADC_REG_IsConversionOngoing>
 8000eaa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff21 	bl	8000cf8 <LL_ADC_INJ_IsConversionOngoing>
 8000eb6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d13d      	bne.n	8000f3a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d13a      	bne.n	8000f3a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ec8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ed0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ee0:	f023 0302 	bic.w	r3, r3, #2
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	69b9      	ldr	r1, [r7, #24]
 8000eea:	430b      	orrs	r3, r1
 8000eec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d118      	bne.n	8000f2a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f02:	f023 0304 	bic.w	r3, r3, #4
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f0e:	4311      	orrs	r1, r2
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f14:	4311      	orrs	r1, r2
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0201 	orr.w	r2, r2, #1
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	e007      	b.n	8000f3a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0201 	bic.w	r2, r2, #1
 8000f38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d10c      	bne.n	8000f5c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f023 010f 	bic.w	r1, r3, #15
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
 8000f5a:	e007      	b.n	8000f6c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 020f 	bic.w	r2, r2, #15
 8000f6a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f70:	f023 0303 	bic.w	r3, r3, #3
 8000f74:	f043 0201 	orr.w	r2, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	655a      	str	r2, [r3, #84]	; 0x54
 8000f7c:	e007      	b.n	8000f8e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f82:	f043 0210 	orr.w	r2, r3, #16
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	053e2d63 	.word	0x053e2d63
 8000fa0:	50040000 	.word	0x50040000
 8000fa4:	50040300 	.word	0x50040300
 8000fa8:	fff0c007 	.word	0xfff0c007

08000fac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0b6      	sub	sp, #216	; 0xd8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d101      	bne.n	8000fce <HAL_ADC_ConfigChannel+0x22>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e3b8      	b.n	8001740 <HAL_ADC_ConfigChannel+0x794>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe79 	bl	8000cd2 <LL_ADC_REG_IsConversionOngoing>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f040 839d 	bne.w	8001722 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d824      	bhi.n	800103a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d81b      	bhi.n	8001032 <HAL_ADC_ConfigChannel+0x86>
 8000ffa:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <HAL_ADC_ConfigChannel+0x54>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	08001011 	.word	0x08001011
 8001004:	08001019 	.word	0x08001019
 8001008:	08001021 	.word	0x08001021
 800100c:	08001029 	.word	0x08001029
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	220c      	movs	r2, #12
 8001014:	605a      	str	r2, [r3, #4]
          break;
 8001016:	e011      	b.n	800103c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2212      	movs	r2, #18
 800101c:	605a      	str	r2, [r3, #4]
          break;
 800101e:	e00d      	b.n	800103c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2218      	movs	r2, #24
 8001024:	605a      	str	r2, [r3, #4]
          break;
 8001026:	e009      	b.n	800103c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102e:	605a      	str	r2, [r3, #4]
          break;
 8001030:	e004      	b.n	800103c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2206      	movs	r2, #6
 8001036:	605a      	str	r2, [r3, #4]
          break;
 8001038:	e000      	b.n	800103c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800103a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	6859      	ldr	r1, [r3, #4]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	f7ff fd66 	bl	8000b1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fe3d 	bl	8000cd2 <LL_ADC_REG_IsConversionOngoing>
 8001058:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe49 	bl	8000cf8 <LL_ADC_INJ_IsConversionOngoing>
 8001066:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800106a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 81a6 	bne.w	80013c0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001074:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001078:	2b00      	cmp	r3, #0
 800107a:	f040 81a1 	bne.w	80013c0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	461a      	mov	r2, r3
 800108c:	f7ff fd71 	bl	8000b72 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d00a      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	6919      	ldr	r1, [r3, #16]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80010c2:	f7ff fcd5 	bl	8000a70 <LL_ADC_SetOffset>
 80010c6:	e17b      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fcf2 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10a      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x148>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fce7 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	0e9b      	lsrs	r3, r3, #26
 80010ee:	f003 021f 	and.w	r2, r3, #31
 80010f2:	e01e      	b.n	8001132 <HAL_ADC_ConfigChannel+0x186>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fcdc 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800111a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001122:	2320      	movs	r3, #32
 8001124:	e004      	b.n	8001130 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800112a:	fab3 f383 	clz	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <HAL_ADC_ConfigChannel+0x19e>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	0e9b      	lsrs	r3, r3, #26
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	e018      	b.n	800117c <HAL_ADC_ConfigChannel+0x1d0>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800115e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001166:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800116e:	2320      	movs	r3, #32
 8001170:	e004      	b.n	800117c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001172:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800117c:	429a      	cmp	r2, r3
 800117e:	d106      	bne.n	800118e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fcab 	bl	8000ae4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fc8f 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10a      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x20e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fc84 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	0e9b      	lsrs	r3, r3, #26
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	e01e      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x24c>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2101      	movs	r1, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fc79 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80011d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80011e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80011e8:	2320      	movs	r3, #32
 80011ea:	e004      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80011ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001200:	2b00      	cmp	r3, #0
 8001202:	d105      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x264>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0e9b      	lsrs	r3, r3, #26
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	e018      	b.n	8001242 <HAL_ADC_ConfigChannel+0x296>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001224:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800122c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001234:	2320      	movs	r3, #32
 8001236:	e004      	b.n	8001242 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001242:	429a      	cmp	r2, r3
 8001244:	d106      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2200      	movs	r2, #0
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fc48 	bl	8000ae4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2102      	movs	r1, #2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fc2c 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10a      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x2d4>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2102      	movs	r1, #2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fc21 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	0e9b      	lsrs	r3, r3, #26
 800127a:	f003 021f 	and.w	r2, r3, #31
 800127e:	e01e      	b.n	80012be <HAL_ADC_ConfigChannel+0x312>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2102      	movs	r1, #2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fc16 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800129e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80012a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80012ae:	2320      	movs	r3, #32
 80012b0:	e004      	b.n	80012bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80012b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d105      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x32a>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0e9b      	lsrs	r3, r3, #26
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	e016      	b.n	8001304 <HAL_ADC_ConfigChannel+0x358>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80012e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80012ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80012f6:	2320      	movs	r3, #32
 80012f8:	e004      	b.n	8001304 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80012fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001304:	429a      	cmp	r2, r3
 8001306:	d106      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	2102      	movs	r1, #2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fbe7 	bl	8000ae4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2103      	movs	r1, #3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fbcb 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10a      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x396>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2103      	movs	r1, #3
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fbc0 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	0e9b      	lsrs	r3, r3, #26
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	e017      	b.n	8001372 <HAL_ADC_ConfigChannel+0x3c6>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2103      	movs	r1, #3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fbb5 	bl	8000ab8 <LL_ADC_GetOffsetChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800135a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800135c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800135e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001364:	2320      	movs	r3, #32
 8001366:	e003      	b.n	8001370 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_ADC_ConfigChannel+0x3de>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0e9b      	lsrs	r3, r3, #26
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	e011      	b.n	80013ae <HAL_ADC_ConfigChannel+0x402>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800139a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800139c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80013a2:	2320      	movs	r3, #32
 80013a4:	e003      	b.n	80013ae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80013a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a8:	fab3 f383 	clz	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d106      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2200      	movs	r2, #0
 80013b8:	2103      	movs	r1, #3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fb92 	bl	8000ae4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc71 	bl	8000cac <LL_ADC_IsEnabled>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f040 813f 	bne.w	8001650 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	6819      	ldr	r1, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	461a      	mov	r2, r3
 80013e0:	f7ff fbf2 	bl	8000bc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4a8e      	ldr	r2, [pc, #568]	; (8001624 <HAL_ADC_ConfigChannel+0x678>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	f040 8130 	bne.w	8001650 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10b      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x46c>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0e9b      	lsrs	r3, r3, #26
 8001406:	3301      	adds	r3, #1
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	2b09      	cmp	r3, #9
 800140e:	bf94      	ite	ls
 8001410:	2301      	movls	r3, #1
 8001412:	2300      	movhi	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	e019      	b.n	800144c <HAL_ADC_ConfigChannel+0x4a0>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001428:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800142a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001430:	2320      	movs	r3, #32
 8001432:	e003      	b.n	800143c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3301      	adds	r3, #1
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	2b09      	cmp	r3, #9
 8001444:	bf94      	ite	ls
 8001446:	2301      	movls	r3, #1
 8001448:	2300      	movhi	r3, #0
 800144a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800144c:	2b00      	cmp	r3, #0
 800144e:	d079      	beq.n	8001544 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001458:	2b00      	cmp	r3, #0
 800145a:	d107      	bne.n	800146c <HAL_ADC_ConfigChannel+0x4c0>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0e9b      	lsrs	r3, r3, #26
 8001462:	3301      	adds	r3, #1
 8001464:	069b      	lsls	r3, r3, #26
 8001466:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800146a:	e015      	b.n	8001498 <HAL_ADC_ConfigChannel+0x4ec>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800147a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800147c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800147e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001484:	2320      	movs	r3, #32
 8001486:	e003      	b.n	8001490 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3301      	adds	r3, #1
 8001492:	069b      	lsls	r3, r3, #26
 8001494:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d109      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x50c>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0e9b      	lsrs	r3, r3, #26
 80014aa:	3301      	adds	r3, #1
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	e017      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x53c>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80014c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80014ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80014d0:	2320      	movs	r3, #32
 80014d2:	e003      	b.n	80014dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80014d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	ea42 0103 	orr.w	r1, r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10a      	bne.n	800150e <HAL_ADC_ConfigChannel+0x562>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0e9b      	lsrs	r3, r3, #26
 80014fe:	3301      	adds	r3, #1
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	051b      	lsls	r3, r3, #20
 800150c:	e018      	b.n	8001540 <HAL_ADC_ConfigChannel+0x594>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800151c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001526:	2320      	movs	r3, #32
 8001528:	e003      	b.n	8001532 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800152a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001540:	430b      	orrs	r3, r1
 8001542:	e080      	b.n	8001646 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154c:	2b00      	cmp	r3, #0
 800154e:	d107      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x5b4>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	0e9b      	lsrs	r3, r3, #26
 8001556:	3301      	adds	r3, #1
 8001558:	069b      	lsls	r3, r3, #26
 800155a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800155e:	e015      	b.n	800158c <HAL_ADC_ConfigChannel+0x5e0>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001578:	2320      	movs	r3, #32
 800157a:	e003      	b.n	8001584 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	3301      	adds	r3, #1
 8001586:	069b      	lsls	r3, r3, #26
 8001588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x600>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0e9b      	lsrs	r3, r3, #26
 800159e:	3301      	adds	r3, #1
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2101      	movs	r1, #1
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	e017      	b.n	80015dc <HAL_ADC_ConfigChannel+0x630>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	61fb      	str	r3, [r7, #28]
  return result;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80015c4:	2320      	movs	r3, #32
 80015c6:	e003      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	f003 031f 	and.w	r3, r3, #31
 80015d6:	2101      	movs	r1, #1
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	ea42 0103 	orr.w	r1, r2, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10d      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x65c>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0e9b      	lsrs	r3, r3, #26
 80015f2:	3301      	adds	r3, #1
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	3b1e      	subs	r3, #30
 8001600:	051b      	lsls	r3, r3, #20
 8001602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001606:	e01d      	b.n	8001644 <HAL_ADC_ConfigChannel+0x698>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	613b      	str	r3, [r7, #16]
  return result;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001620:	2320      	movs	r3, #32
 8001622:	e005      	b.n	8001630 <HAL_ADC_ConfigChannel+0x684>
 8001624:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	3301      	adds	r3, #1
 8001632:	f003 021f 	and.w	r2, r3, #31
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	3b1e      	subs	r3, #30
 800163e:	051b      	lsls	r3, r3, #20
 8001640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001644:	430b      	orrs	r3, r1
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	6892      	ldr	r2, [r2, #8]
 800164a:	4619      	mov	r1, r3
 800164c:	f7ff fa91 	bl	8000b72 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <HAL_ADC_ConfigChannel+0x79c>)
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d06b      	beq.n	8001734 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800165c:	483b      	ldr	r0, [pc, #236]	; (800174c <HAL_ADC_ConfigChannel+0x7a0>)
 800165e:	f7ff f9f9 	bl	8000a54 <LL_ADC_GetCommonPathInternalCh>
 8001662:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a39      	ldr	r2, [pc, #228]	; (8001750 <HAL_ADC_ConfigChannel+0x7a4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d126      	bne.n	80016be <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d120      	bne.n	80016be <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a34      	ldr	r2, [pc, #208]	; (8001754 <HAL_ADC_ConfigChannel+0x7a8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d156      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001686:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800168a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800168e:	4619      	mov	r1, r3
 8001690:	482e      	ldr	r0, [pc, #184]	; (800174c <HAL_ADC_ConfigChannel+0x7a0>)
 8001692:	f7ff f9cc 	bl	8000a2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_ADC_ConfigChannel+0x7ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	099b      	lsrs	r3, r3, #6
 800169c:	4a2f      	ldr	r2, [pc, #188]	; (800175c <HAL_ADC_ConfigChannel+0x7b0>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	099a      	lsrs	r2, r3, #6
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016ae:	e002      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f9      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016bc:	e03a      	b.n	8001734 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a27      	ldr	r2, [pc, #156]	; (8001760 <HAL_ADC_ConfigChannel+0x7b4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d113      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x744>
 80016c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10d      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1e      	ldr	r2, [pc, #120]	; (8001754 <HAL_ADC_ConfigChannel+0x7a8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12a      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e6:	4619      	mov	r1, r3
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <HAL_ADC_ConfigChannel+0x7a0>)
 80016ea:	f7ff f9a0 	bl	8000a2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016ee:	e021      	b.n	8001734 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_ADC_ConfigChannel+0x7b8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d11c      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <HAL_ADC_ConfigChannel+0x7a8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d111      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001718:	4619      	mov	r1, r3
 800171a:	480c      	ldr	r0, [pc, #48]	; (800174c <HAL_ADC_ConfigChannel+0x7a0>)
 800171c:	f7ff f987 	bl	8000a2e <LL_ADC_SetCommonPathInternalCh>
 8001720:	e008      	b.n	8001734 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	f043 0220 	orr.w	r2, r3, #32
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800173c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001740:	4618      	mov	r0, r3
 8001742:	37d8      	adds	r7, #216	; 0xd8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	80080000 	.word	0x80080000
 800174c:	50040300 	.word	0x50040300
 8001750:	c7520000 	.word	0xc7520000
 8001754:	50040000 	.word	0x50040000
 8001758:	20000000 	.word	0x20000000
 800175c:	053e2d63 	.word	0x053e2d63
 8001760:	cb840000 	.word	0xcb840000
 8001764:	80000001 	.word	0x80000001

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff8e 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff29 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff3e 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff8e 	bl	800185c <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff31 	bl	80017cc <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e014      	b.n	80019c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	791b      	ldrb	r3, [r3, #4]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d105      	bne.n	80019b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7fe fe8f 	bl	80006d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2202      	movs	r2, #2
 80019b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b088      	sub	sp, #32
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	795b      	ldrb	r3, [r3, #5]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_DAC_ConfigChannel+0x1c>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e107      	b.n	8001bfa <HAL_DAC_ConfigChannel+0x22c>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2202      	movs	r2, #2
 80019f4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d174      	bne.n	8001ae8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80019fe:	f7fe fff7 	bl	80009f0 <HAL_GetTick>
 8001a02:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d134      	bne.n	8001a74 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a0a:	e011      	b.n	8001a30 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a0c:	f7fe fff0 	bl	80009f0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d90a      	bls.n	8001a30 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f043 0208 	orr.w	r2, r3, #8
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0e4      	b.n	8001bfa <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1e6      	bne.n	8001a0c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f7fe fdb8 	bl	80005b4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	6992      	ldr	r2, [r2, #24]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a4e:	e01e      	b.n	8001a8e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a50:	f7fe ffce 	bl	80009f0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d90a      	bls.n	8001a74 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f043 0208 	orr.w	r2, r3, #8
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0c2      	b.n	8001bfa <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	dbe8      	blt.n	8001a50 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7fe fd98 	bl	80005b4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	6992      	ldr	r2, [r2, #24]
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	ea02 0103 	and.w	r1, r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	21ff      	movs	r1, #255	; 0xff
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	ea02 0103 	and.w	r1, r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	6a1a      	ldr	r2, [r3, #32]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d11d      	bne.n	8001b2c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	221f      	movs	r2, #31
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	400a      	ands	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	22c0      	movs	r2, #192	; 0xc0
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	400a      	ands	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	e154      	b.n	8001ebe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8146 	beq.w	8001eb8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d00b      	beq.n	8001c4c <HAL_GPIO_Init+0x48>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d007      	beq.n	8001c4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c40:	2b11      	cmp	r3, #17
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b12      	cmp	r3, #18
 8001c4a:	d130      	bne.n	8001cae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c82:	2201      	movs	r2, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 0201 	and.w	r2, r3, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0xea>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b12      	cmp	r3, #18
 8001cec:	d123      	bne.n	8001d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	6939      	ldr	r1, [r7, #16]
 8001d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0203 	and.w	r2, r3, #3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80a0 	beq.w	8001eb8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d78:	4b58      	ldr	r3, [pc, #352]	; (8001edc <HAL_GPIO_Init+0x2d8>)
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	4a57      	ldr	r2, [pc, #348]	; (8001edc <HAL_GPIO_Init+0x2d8>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6613      	str	r3, [r2, #96]	; 0x60
 8001d84:	4b55      	ldr	r3, [pc, #340]	; (8001edc <HAL_GPIO_Init+0x2d8>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d90:	4a53      	ldr	r2, [pc, #332]	; (8001ee0 <HAL_GPIO_Init+0x2dc>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dba:	d019      	beq.n	8001df0 <HAL_GPIO_Init+0x1ec>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a49      	ldr	r2, [pc, #292]	; (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <HAL_GPIO_Init+0x1e8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_GPIO_Init+0x2e4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00d      	beq.n	8001de8 <HAL_GPIO_Init+0x1e4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a47      	ldr	r2, [pc, #284]	; (8001eec <HAL_GPIO_Init+0x2e8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <HAL_GPIO_Init+0x1e0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a46      	ldr	r2, [pc, #280]	; (8001ef0 <HAL_GPIO_Init+0x2ec>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_GPIO_Init+0x1dc>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e008      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001de0:	2307      	movs	r3, #7
 8001de2:	e006      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001de4:	2303      	movs	r3, #3
 8001de6:	e004      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e002      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001df0:	2300      	movs	r3, #0
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	f002 0203 	and.w	r2, r2, #3
 8001df8:	0092      	lsls	r2, r2, #2
 8001dfa:	4093      	lsls	r3, r2
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e02:	4937      	ldr	r1, [pc, #220]	; (8001ee0 <HAL_GPIO_Init+0x2dc>)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e10:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e34:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eb2:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f47f aea3 	bne.w	8001c14 <HAL_GPIO_Init+0x10>
  }
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	48000400 	.word	0x48000400
 8001ee8:	48000800 	.word	0x48000800
 8001eec:	48000c00 	.word	0x48000c00
 8001ef0:	48001000 	.word	0x48001000
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	b08b      	sub	sp, #44	; 0x2c
 8001f2c:	af06      	add	r7, sp, #24
 8001f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e104      	b.n	8002144 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f006 fd1a 	bl	8008988 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2203      	movs	r2, #3
 8001f58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fe45 	bl	8004bf0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	687e      	ldr	r6, [r7, #4]
 8001f6e:	466d      	mov	r5, sp
 8001f70:	f106 0410 	add.w	r4, r6, #16
 8001f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	602b      	str	r3, [r5, #0]
 8001f7c:	1d33      	adds	r3, r6, #4
 8001f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f80:	6838      	ldr	r0, [r7, #0]
 8001f82:	f002 fe0d 	bl	8004ba0 <USB_CoreInit>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0d5      	b.n	8002144 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 fe41 	bl	8004c26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	e04c      	b.n	8002044 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	3301      	adds	r3, #1
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	b298      	uxth	r0, r3
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3336      	adds	r3, #54	; 0x36
 8001fe8:	4602      	mov	r2, r0
 8001fea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	3338      	adds	r3, #56	; 0x38
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	333c      	adds	r3, #60	; 0x3c
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	3340      	adds	r3, #64	; 0x40
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	3301      	adds	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d3ad      	bcc.n	8001faa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	e044      	b.n	80020de <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	3301      	adds	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d3b5      	bcc.n	8002054 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	687e      	ldr	r6, [r7, #4]
 80020f0:	466d      	mov	r5, sp
 80020f2:	f106 0410 	add.w	r4, r6, #16
 80020f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	602b      	str	r3, [r5, #0]
 80020fe:	1d33      	adds	r3, r6, #4
 8002100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002102:	6838      	ldr	r0, [r7, #0]
 8002104:	f002 fd9c 	bl	8004c40 <USB_DevInit>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2202      	movs	r2, #2
 8002112:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e014      	b.n	8002144 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f001 fa63 	bl	80035fe <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f004 fd55 	bl	8006bec <USB_DevDisconnect>

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800214c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_PCD_Start+0x16>
 800215e:	2302      	movs	r3, #2
 8002160:	e012      	b.n	8002188 <HAL_PCD_Start+0x3c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f002 fd27 	bl	8004bc2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f004 fd20 	bl	8006bbe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f004 fd3a 	bl	8006c16 <USB_ReadInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ac:	d102      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fb5b 	bl	800286a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 fd2c 	bl	8006c16 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c8:	d112      	bne.n	80021f0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021dc:	b292      	uxth	r2, r2
 80021de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f006 fc4b 	bl	8008a7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80021e8:	2100      	movs	r1, #0
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f91e 	bl	800242c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f004 fd0e 	bl	8006c16 <USB_ReadInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002204:	d10b      	bne.n	800221e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800220e:	b29a      	uxth	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002218:	b292      	uxth	r2, r2
 800221a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fcf7 	bl	8006c16 <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002232:	d10b      	bne.n	800224c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800223c:	b29a      	uxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002246:	b292      	uxth	r2, r2
 8002248:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f004 fce0 	bl	8006c16 <USB_ReadInterrupts>
 8002256:	4603      	mov	r3, r0
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002260:	d133      	bne.n	80022ca <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0204 	bic.w	r2, r2, #4
 8002274:	b292      	uxth	r2, r2
 8002276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002282:	b29a      	uxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0208 	bic.w	r2, r2, #8
 800228c:	b292      	uxth	r2, r2
 800228e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002298:	2b01      	cmp	r3, #1
 800229a:	d107      	bne.n	80022ac <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022a4:	2100      	movs	r1, #0
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f006 fe9a 	bl	8008fe0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f006 fc1f 	bl	8008af0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022c4:	b292      	uxth	r2, r2
 80022c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 fca1 	bl	8006c16 <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022de:	d126      	bne.n	800232e <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0208 	orr.w	r2, r2, #8
 80022f2:	b292      	uxth	r2, r2
 80022f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002300:	b29a      	uxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230a:	b292      	uxth	r2, r2
 800230c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0204 	orr.w	r2, r2, #4
 8002322:	b292      	uxth	r2, r2
 8002324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f006 fbc7 	bl	8008abc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f004 fc6f 	bl	8006c16 <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233e:	2b80      	cmp	r3, #128	; 0x80
 8002340:	d13f      	bne.n	80023c2 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002354:	b292      	uxth	r2, r2
 8002356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d12b      	bne.n	80023bc <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800236c:	b29a      	uxth	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0204 	orr.w	r2, r2, #4
 8002376:	b292      	uxth	r2, r2
 8002378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002384:	b29a      	uxth	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0208 	orr.w	r2, r2, #8
 800238e:	b292      	uxth	r2, r2
 8002390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023b2:	2101      	movs	r1, #1
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f006 fe13 	bl	8008fe0 <HAL_PCDEx_LPM_Callback>
 80023ba:	e002      	b.n	80023c2 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f006 fb7d 	bl	8008abc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 fc25 	bl	8006c16 <USB_ReadInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d6:	d10e      	bne.n	80023f6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023ea:	b292      	uxth	r2, r2
 80023ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f006 fb36 	bl	8008a62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f004 fc0b 	bl	8006c16 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240a:	d10b      	bne.n	8002424 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002414:	b29a      	uxth	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800241e:	b292      	uxth	r2, r2
 8002420:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_PCD_SetAddress+0x1a>
 8002442:	2302      	movs	r3, #2
 8002444:	e013      	b.n	800246e <HAL_PCD_SetAddress+0x42>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f004 fb99 	bl	8006b96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	4608      	mov	r0, r1
 8002480:	4611      	mov	r1, r2
 8002482:	461a      	mov	r2, r3
 8002484:	4603      	mov	r3, r0
 8002486:	70fb      	strb	r3, [r7, #3]
 8002488:	460b      	mov	r3, r1
 800248a:	803b      	strh	r3, [r7, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002498:	2b00      	cmp	r3, #0
 800249a:	da0e      	bge.n	80024ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	705a      	strb	r2, [r3, #1]
 80024b8:	e00e      	b.n	80024d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f003 0207 	and.w	r2, r3, #7
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	4413      	add	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024e4:	883a      	ldrh	r2, [r7, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	78ba      	ldrb	r2, [r7, #2]
 80024ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002502:	78bb      	ldrb	r3, [r7, #2]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d102      	bne.n	800250e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_PCD_EP_Open+0xa6>
 8002518:	2302      	movs	r3, #2
 800251a:	e00e      	b.n	800253a <HAL_PCD_EP_Open+0xc4>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68f9      	ldr	r1, [r7, #12]
 800252a:	4618      	mov	r0, r3
 800252c:	f002 fbaa 	bl	8004c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002538:	7afb      	ldrb	r3, [r7, #11]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800254e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002552:	2b00      	cmp	r3, #0
 8002554:	da0e      	bge.n	8002574 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	705a      	strb	r2, [r3, #1]
 8002572:	e00e      	b.n	8002592 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f003 0207 	and.w	r2, r3, #7
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_PCD_EP_Close+0x6a>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e00e      	b.n	80025ca <HAL_PCD_EP_Close+0x88>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68f9      	ldr	r1, [r7, #12]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 fed0 	bl	8005360 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	460b      	mov	r3, r1
 80025e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e2:	7afb      	ldrb	r3, [r7, #11]
 80025e4:	f003 0207 	and.w	r2, r3, #7
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4413      	add	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2200      	movs	r2, #0
 800260a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2200      	movs	r2, #0
 8002610:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002612:	7afb      	ldrb	r3, [r7, #11]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	b2da      	uxtb	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800261e:	7afb      	ldrb	r3, [r7, #11]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	2b00      	cmp	r3, #0
 8002626:	d106      	bne.n	8002636 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6979      	ldr	r1, [r7, #20]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 f883 	bl	800573a <USB_EPStartXfer>
 8002634:	e005      	b.n	8002642 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6979      	ldr	r1, [r7, #20]
 800263c:	4618      	mov	r0, r3
 800263e:	f003 f87c 	bl	800573a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	f003 0207 	and.w	r2, r3, #7
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	460b      	mov	r3, r1
 800268a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2201      	movs	r2, #1
 80026c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026c8:	7afb      	ldrb	r3, [r7, #11]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026d4:	7afb      	ldrb	r3, [r7, #11]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6979      	ldr	r1, [r7, #20]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f003 f828 	bl	800573a <USB_EPStartXfer>
 80026ea:	e005      	b.n	80026f8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6979      	ldr	r1, [r7, #20]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 f821 	bl	800573a <USB_EPStartXfer>
  }

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	f003 0207 	and.w	r2, r3, #7
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d901      	bls.n	8002720 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e04c      	b.n	80027ba <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002724:	2b00      	cmp	r3, #0
 8002726:	da0e      	bge.n	8002746 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4413      	add	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	705a      	strb	r2, [r3, #1]
 8002744:	e00c      	b.n	8002760 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	b2da      	uxtb	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_PCD_EP_SetStall+0x7e>
 800277c:	2302      	movs	r3, #2
 800277e:	e01c      	b.n	80027ba <HAL_PCD_EP_SetStall+0xb8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	4618      	mov	r0, r3
 8002790:	f004 f902 	bl	8006998 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f004 fa43 	bl	8006c36 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	f003 020f 	and.w	r2, r3, #15
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d901      	bls.n	80027e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e040      	b.n	8002862 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	da0e      	bge.n	8002806 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	705a      	strb	r2, [r3, #1]
 8002804:	e00e      	b.n	8002824 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	f003 0207 	and.w	r2, r3, #7
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_PCD_EP_ClrStall+0x82>
 8002840:	2302      	movs	r3, #2
 8002842:	e00e      	b.n	8002862 <HAL_PCD_EP_ClrStall+0xa0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68f9      	ldr	r1, [r7, #12]
 8002852:	4618      	mov	r0, r3
 8002854:	f004 f8f1 	bl	8006a3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b08e      	sub	sp, #56	; 0x38
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002872:	e2d1      	b.n	8002e18 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800287c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800287e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800288a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8152 	bne.w	8002b38 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002894:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d150      	bne.n	8002940 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	81fb      	strh	r3, [r7, #14]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	89fb      	ldrh	r3, [r7, #14]
 80028b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028be:	b29b      	uxth	r3, r3
 80028c0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3328      	adds	r3, #40	; 0x28
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	441a      	add	r2, r3
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80028fe:	2100      	movs	r1, #0
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f006 f894 	bl	8008a2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8282 	beq.w	8002e18 <PCD_EP_ISR_Handler+0x5ae>
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f040 827d 	bne.w	8002e18 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800292a:	b2da      	uxtb	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b292      	uxth	r2, r2
 8002932:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800293e:	e26b      	b.n	8002e18 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002950:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002956:	2b00      	cmp	r3, #0
 8002958:	d032      	beq.n	80029c0 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	4413      	add	r3, r2
 8002974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002994:	b29b      	uxth	r3, r3
 8002996:	f004 f99b 	bl	8006cd0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029a6:	4013      	ands	r3, r2
 80029a8:	823b      	strh	r3, [r7, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	8a3a      	ldrh	r2, [r7, #16]
 80029b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029b4:	b292      	uxth	r2, r2
 80029b6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f006 f80b 	bl	80089d4 <HAL_PCD_SetupStageCallback>
 80029be:	e22b      	b.n	8002e18 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f280 8227 	bge.w	8002e18 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029d6:	4013      	ands	r3, r2
 80029d8:	83bb      	strh	r3, [r7, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	8bba      	ldrh	r2, [r7, #28]
 80029e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029e4:	b292      	uxth	r2, r2
 80029e6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	4413      	add	r3, r2
 8002a02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d019      	beq.n	8002a4c <PCD_EP_ISR_Handler+0x1e2>
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d015      	beq.n	8002a4c <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	6959      	ldr	r1, [r3, #20]
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f004 f94d 	bl	8006cd0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	441a      	add	r2, r3
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a44:	2100      	movs	r1, #0
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f005 ffd6 	bl	80089f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4413      	add	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d112      	bne.n	8002a9a <PCD_EP_ISR_Handler+0x230>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	e02f      	b.n	8002afa <PCD_EP_ISR_Handler+0x290>
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b3e      	cmp	r3, #62	; 0x3e
 8002aa0:	d813      	bhi.n	8002aca <PCD_EP_ISR_Handler+0x260>
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <PCD_EP_ISR_Handler+0x252>
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	3301      	adds	r3, #1
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	029b      	lsls	r3, r3, #10
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	801a      	strh	r2, [r3, #0]
 8002ac8:	e017      	b.n	8002afa <PCD_EP_ISR_Handler+0x290>
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d102      	bne.n	8002ae4 <PCD_EP_ISR_Handler+0x27a>
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	029b      	lsls	r3, r3, #10
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	827b      	strh	r3, [r7, #18]
 8002b0c:	8a7b      	ldrh	r3, [r7, #18]
 8002b0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b12:	827b      	strh	r3, [r7, #18]
 8002b14:	8a7b      	ldrh	r3, [r7, #18]
 8002b16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b1a:	827b      	strh	r3, [r7, #18]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	8a7b      	ldrh	r3, [r7, #18]
 8002b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	8013      	strh	r3, [r2, #0]
 8002b36:	e16f      	b.n	8002e18 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b4a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f280 80e4 	bge.w	8002d1c <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	853b      	strh	r3, [r7, #40]	; 0x28
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b82:	b292      	uxth	r2, r2
 8002b84:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b86:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	7b1b      	ldrb	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d120      	bne.n	8002be6 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002bca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8083 	beq.w	8002cd8 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	6959      	ldr	r1, [r3, #20]
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	88da      	ldrh	r2, [r3, #6]
 8002bde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002be0:	f004 f876 	bl	8006cd0 <USB_ReadPMA>
 8002be4:	e078      	b.n	8002cd8 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	78db      	ldrb	r3, [r3, #3]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d108      	bne.n	8002c00 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002bee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f91d 	bl	8002e34 <HAL_PCD_EP_DB_Receive>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002bfe:	e06b      	b.n	8002cd8 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01f      	beq.n	8002c9a <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002c80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d028      	beq.n	8002cd8 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	6959      	ldr	r1, [r3, #20]
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	891a      	ldrh	r2, [r3, #8]
 8002c92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c94:	f004 f81c 	bl	8006cd0 <USB_ReadPMA>
 8002c98:	e01e      	b.n	8002cd8 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cbe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002cc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	6959      	ldr	r1, [r3, #20]
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	895a      	ldrh	r2, [r3, #10]
 8002cd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cd4:	f003 fffc 	bl	8006cd0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cde:	441a      	add	r2, r3
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cea:	441a      	add	r2, r3
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <PCD_EP_ISR_Handler+0x498>
 8002cf8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d206      	bcs.n	8002d10 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	4619      	mov	r1, r3
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f005 fe75 	bl	80089f8 <HAL_PCD_DataOutStageCallback>
 8002d0e:	e005      	b.n	8002d1c <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d16:	4618      	mov	r0, r3
 8002d18:	f002 fd0f 	bl	800573a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d078      	beq.n	8002e18 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002d26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d54:	843b      	strh	r3, [r7, #32]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	441a      	add	r2, r3
 8002d64:	8c3b      	ldrh	r3, [r7, #32]
 8002d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	78db      	ldrb	r3, [r3, #3]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d108      	bne.n	8002d8c <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d144      	bne.n	8002e0c <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002d82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d13f      	bne.n	8002e0c <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	4413      	add	r3, r2
 8002da6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	8bfb      	ldrh	r3, [r7, #30]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d906      	bls.n	8002dca <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	8bfb      	ldrh	r3, [r7, #30]
 8002dc2:	1ad2      	subs	r2, r2, r3
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	619a      	str	r2, [r3, #24]
 8002dc8:	e002      	b.n	8002dd0 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f005 fe25 	bl	8008a2e <HAL_PCD_DataInStageCallback>
 8002de4:	e018      	b.n	8002e18 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	8bfb      	ldrh	r3, [r7, #30]
 8002dec:	441a      	add	r2, r3
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	8bfb      	ldrh	r3, [r7, #30]
 8002df8:	441a      	add	r2, r3
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fc98 	bl	800573a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002e0a:	e005      	b.n	8002e18 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f917 	bl	8003046 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f6ff ad25 	blt.w	8002874 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3738      	adds	r7, #56	; 0x38
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d07c      	beq.n	8002f46 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	8b7b      	ldrh	r3, [r7, #26]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d306      	bcc.n	8002e8a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	8b7b      	ldrh	r3, [r7, #26]
 8002e82:	1ad2      	subs	r2, r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	619a      	str	r2, [r3, #24]
 8002e88:	e002      	b.n	8002e90 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d123      	bne.n	8002ee0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	833b      	strh	r3, [r7, #24]
 8002eb4:	8b3b      	ldrh	r3, [r7, #24]
 8002eb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eba:	833b      	strh	r3, [r7, #24]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	8b3b      	ldrh	r3, [r7, #24]
 8002ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01f      	beq.n	8002f2a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f04:	82fb      	strh	r3, [r7, #22]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	441a      	add	r2, r3
 8002f14:	8afb      	ldrh	r3, [r7, #22]
 8002f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f2a:	8b7b      	ldrh	r3, [r7, #26]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8085 	beq.w	800303c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	6959      	ldr	r1, [r3, #20]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	891a      	ldrh	r2, [r3, #8]
 8002f3e:	8b7b      	ldrh	r3, [r7, #26]
 8002f40:	f003 fec6 	bl	8006cd0 <USB_ReadPMA>
 8002f44:	e07a      	b.n	800303c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f6a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	8b7b      	ldrh	r3, [r7, #26]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d306      	bcc.n	8002f84 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	8b7b      	ldrh	r3, [r7, #26]
 8002f7c:	1ad2      	subs	r2, r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	619a      	str	r2, [r3, #24]
 8002f82:	e002      	b.n	8002f8a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d123      	bne.n	8002fda <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fac:	83fb      	strh	r3, [r7, #30]
 8002fae:	8bfb      	ldrh	r3, [r7, #30]
 8002fb0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fb4:	83fb      	strh	r3, [r7, #30]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	441a      	add	r2, r3
 8002fc4:	8bfb      	ldrh	r3, [r7, #30]
 8002fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11f      	bne.n	8003024 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffe:	83bb      	strh	r3, [r7, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	441a      	add	r2, r3
 800300e:	8bbb      	ldrh	r3, [r7, #28]
 8003010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003020:	b29b      	uxth	r3, r3
 8003022:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003024:	8b7b      	ldrh	r3, [r7, #26]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	6959      	ldr	r1, [r3, #20]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	895a      	ldrh	r2, [r3, #10]
 8003036:	8b7b      	ldrh	r3, [r7, #26]
 8003038:	f003 fe4a 	bl	8006cd0 <USB_ReadPMA>
    }
  }

  return count;
 800303c:	8b7b      	ldrh	r3, [r7, #26]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b092      	sub	sp, #72	; 0x48
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	4613      	mov	r3, r2
 8003052:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8130 	beq.w	80032c0 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	4413      	add	r3, r2
 800307a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003084:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800308c:	429a      	cmp	r2, r3
 800308e:	d906      	bls.n	800309e <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003096:	1ad2      	subs	r2, r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	619a      	str	r2, [r3, #24]
 800309c:	e002      	b.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d12c      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f005 fcbb 	bl	8008a2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 822d 	beq.w	800351e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	827b      	strh	r3, [r7, #18]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	8a7b      	ldrh	r3, [r7, #18]
 80030f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003100:	b29b      	uxth	r3, r3
 8003102:	8013      	strh	r3, [r2, #0]
 8003104:	e20b      	b.n	800351e <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01f      	beq.n	8003150 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b29b      	uxth	r3, r3
 8003122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	441a      	add	r2, r3
 800313a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800313c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314c:	b29b      	uxth	r3, r3
 800314e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003156:	2b01      	cmp	r3, #1
 8003158:	f040 81e1 	bne.w	800351e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003162:	441a      	add	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800316e:	441a      	add	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	6a1a      	ldr	r2, [r3, #32]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	429a      	cmp	r2, r3
 800317e:	d309      	bcc.n	8003194 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	1ad2      	subs	r2, r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	621a      	str	r2, [r3, #32]
 8003192:	e014      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d106      	bne.n	80031aa <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 800319c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800319e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031a8:	e009      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	785b      	ldrb	r3, [r3, #1]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d155      	bne.n	8003272 <HAL_PCD_EP_DB_Transmit+0x22c>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4413      	add	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	00da      	lsls	r2, r3, #3
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	4413      	add	r3, r2
 80031e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d112      	bne.n	800321a <HAL_PCD_EP_DB_Transmit+0x1d4>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031fe:	b29a      	uxth	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	801a      	strh	r2, [r3, #0]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800320e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003212:	b29a      	uxth	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	801a      	strh	r2, [r3, #0]
 8003218:	e047      	b.n	80032aa <HAL_PCD_EP_DB_Transmit+0x264>
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	2b3e      	cmp	r3, #62	; 0x3e
 800321e:	d811      	bhi.n	8003244 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8003220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	3301      	adds	r3, #1
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	b29b      	uxth	r3, r3
 800323a:	029b      	lsls	r3, r3, #10
 800323c:	b29a      	uxth	r2, r3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	e032      	b.n	80032aa <HAL_PCD_EP_DB_Transmit+0x264>
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <HAL_PCD_EP_DB_Transmit+0x214>
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	b29b      	uxth	r3, r3
 800325e:	029b      	lsls	r3, r3, #10
 8003260:	b29b      	uxth	r3, r3
 8003262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800326a:	b29a      	uxth	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	801a      	strh	r2, [r3, #0]
 8003270:	e01b      	b.n	80032aa <HAL_PCD_EP_DB_Transmit+0x264>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	785b      	ldrb	r3, [r3, #1]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d117      	bne.n	80032aa <HAL_PCD_EP_DB_Transmit+0x264>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003288:	b29b      	uxth	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	4413      	add	r3, r2
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	00da      	lsls	r2, r3, #3
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	4413      	add	r3, r2
 800329c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6959      	ldr	r1, [r3, #20]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	891a      	ldrh	r2, [r3, #8]
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f003 fcc8 	bl	8006c4e <USB_WritePMA>
 80032be:	e12e      	b.n	800351e <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d306      	bcc.n	80032fe <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032f6:	1ad2      	subs	r2, r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	619a      	str	r2, [r3, #24]
 80032fc:	e002      	b.n	8003304 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d12c      	bne.n	8003366 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f005 fb8b 	bl	8008a2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 80fd 	bne.w	800351e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800335c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003360:	b29b      	uxth	r3, r3
 8003362:	8013      	strh	r3, [r2, #0]
 8003364:	e0db      	b.n	800351e <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d11f      	bne.n	80033b0 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	441a      	add	r2, r3
 800339a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800339c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	f040 80b1 	bne.w	800351e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033c2:	441a      	add	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033ce:	441a      	add	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d309      	bcc.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	1ad2      	subs	r2, r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	621a      	str	r2, [r3, #32]
 80033f2:	e014      	b.n	800341e <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80033fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003408:	e009      	b.n	800341e <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2200      	movs	r2, #0
 8003414:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	785b      	ldrb	r3, [r3, #1]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d155      	bne.n	80034d8 <HAL_PCD_EP_DB_Transmit+0x492>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	647b      	str	r3, [r7, #68]	; 0x44
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003440:	4413      	add	r3, r2
 8003442:	647b      	str	r3, [r7, #68]	; 0x44
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	00da      	lsls	r2, r3, #3
 800344a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344c:	4413      	add	r3, r2
 800344e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003452:	643b      	str	r3, [r7, #64]	; 0x40
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	2b00      	cmp	r3, #0
 8003458:	d112      	bne.n	8003480 <HAL_PCD_EP_DB_Transmit+0x43a>
 800345a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003464:	b29a      	uxth	r2, r3
 8003466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003468:	801a      	strh	r2, [r3, #0]
 800346a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003478:	b29a      	uxth	r2, r3
 800347a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800347c:	801a      	strh	r2, [r3, #0]
 800347e:	e044      	b.n	800350a <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003482:	2b3e      	cmp	r3, #62	; 0x3e
 8003484:	d811      	bhi.n	80034aa <HAL_PCD_EP_DB_Transmit+0x464>
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_PCD_EP_DB_Transmit+0x456>
 8003496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003498:	3301      	adds	r3, #1
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349e:	b29b      	uxth	r3, r3
 80034a0:	029b      	lsls	r3, r3, #10
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a6:	801a      	strh	r2, [r3, #0]
 80034a8:	e02f      	b.n	800350a <HAL_PCD_EP_DB_Transmit+0x4c4>
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x47a>
 80034ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034bc:	3b01      	subs	r3, #1
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	029b      	lsls	r3, r3, #10
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d4:	801a      	strh	r2, [r3, #0]
 80034d6:	e018      	b.n	800350a <HAL_PCD_EP_DB_Transmit+0x4c4>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	785b      	ldrb	r3, [r3, #1]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d114      	bne.n	800350a <HAL_PCD_EP_DB_Transmit+0x4c4>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ee:	4413      	add	r3, r2
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	00da      	lsls	r2, r3, #3
 80034f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fa:	4413      	add	r3, r2
 80034fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003500:	633b      	str	r3, [r7, #48]	; 0x30
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	b29a      	uxth	r2, r3
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6959      	ldr	r1, [r3, #20]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	895a      	ldrh	r2, [r3, #10]
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	b29b      	uxth	r3, r3
 800351a:	f003 fb98 	bl	8006c4e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003538:	823b      	strh	r3, [r7, #16]
 800353a:	8a3b      	ldrh	r3, [r7, #16]
 800353c:	f083 0310 	eor.w	r3, r3, #16
 8003540:	823b      	strh	r3, [r7, #16]
 8003542:	8a3b      	ldrh	r3, [r7, #16]
 8003544:	f083 0320 	eor.w	r3, r3, #32
 8003548:	823b      	strh	r3, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	441a      	add	r2, r3
 8003558:	8a3b      	ldrh	r3, [r7, #16]
 800355a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800355e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356a:	b29b      	uxth	r3, r3
 800356c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3748      	adds	r7, #72	; 0x48
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	817b      	strh	r3, [r7, #10]
 8003586:	4613      	mov	r3, r2
 8003588:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4413      	add	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e009      	b.n	80035c2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035ae:	897a      	ldrh	r2, [r7, #10]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035c2:	893b      	ldrh	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2200      	movs	r2, #0
 80035cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	80da      	strh	r2, [r3, #6]
 80035d6:	e00b      	b.n	80035f0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2201      	movs	r2, #1
 80035dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003622:	b29b      	uxth	r3, r3
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003636:	b29b      	uxth	r3, r3
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_PWREx_GetVoltageRange+0x18>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40007000 	.word	0x40007000

08003670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367e:	d130      	bne.n	80036e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368c:	d038      	beq.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003696:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800369c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2232      	movs	r2, #50	; 0x32
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	0c9b      	lsrs	r3, r3, #18
 80036b0:	3301      	adds	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b4:	e002      	b.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c8:	d102      	bne.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f2      	bne.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036dc:	d110      	bne.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e00f      	b.n	8003702 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ee:	d007      	beq.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f8:	4a05      	ldr	r2, [pc, #20]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40007000 	.word	0x40007000
 8003714:	20000000 	.word	0x20000000
 8003718:	431bde83 	.word	0x431bde83

0800371c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800372a:	6053      	str	r3, [r2, #4]
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40007000 	.word	0x40007000

0800373c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f000 bc11 	b.w	8003f72 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003750:	4ba0      	ldr	r3, [pc, #640]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800375a:	4b9e      	ldr	r3, [pc, #632]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80e4 	beq.w	800393a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_RCC_OscConfig+0x4c>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	f040 808b 	bne.w	8003896 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b01      	cmp	r3, #1
 8003784:	f040 8087 	bne.w	8003896 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003788:	4b92      	ldr	r3, [pc, #584]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_OscConfig+0x64>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e3e8      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	4b8b      	ldr	r3, [pc, #556]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <HAL_RCC_OscConfig+0x7e>
 80037b0:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b8:	e005      	b.n	80037c6 <HAL_RCC_OscConfig+0x8a>
 80037ba:	4b86      	ldr	r3, [pc, #536]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d223      	bcs.n	8003812 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fd40 	bl	8004254 <RCC_SetFlashLatencyFromMSIRange>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e3c9      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037de:	4b7d      	ldr	r3, [pc, #500]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7c      	ldr	r2, [pc, #496]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037e4:	f043 0308 	orr.w	r3, r3, #8
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b7a      	ldr	r3, [pc, #488]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4977      	ldr	r1, [pc, #476]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037fc:	4b75      	ldr	r3, [pc, #468]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	4972      	ldr	r1, [pc, #456]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
 8003810:	e025      	b.n	800385e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003812:	4b70      	ldr	r3, [pc, #448]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6f      	ldr	r2, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003818:	f043 0308 	orr.w	r3, r3, #8
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	496a      	ldr	r1, [pc, #424]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003830:	4b68      	ldr	r3, [pc, #416]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	4965      	ldr	r1, [pc, #404]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fd00 	bl	8004254 <RCC_SetFlashLatencyFromMSIRange>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e389      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800385e:	f000 fc6f 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8003862:	4601      	mov	r1, r0
 8003864:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	4a5a      	ldr	r2, [pc, #360]	; (80039d8 <HAL_RCC_OscConfig+0x29c>)
 8003870:	5cd3      	ldrb	r3, [r2, r3]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	fa21 f303 	lsr.w	r3, r1, r3
 800387a:	4a58      	ldr	r2, [pc, #352]	; (80039dc <HAL_RCC_OscConfig+0x2a0>)
 800387c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800387e:	4b58      	ldr	r3, [pc, #352]	; (80039e0 <HAL_RCC_OscConfig+0x2a4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd f864 	bl	8000950 <HAL_InitTick>
 8003888:	4603      	mov	r3, r0
 800388a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d052      	beq.n	8003938 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	e36d      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d032      	beq.n	8003904 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800389e:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a4c      	ldr	r2, [pc, #304]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038aa:	f7fd f8a1 	bl	80009f0 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038b2:	f7fd f89d 	bl	80009f0 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e356      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038c4:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038d0:	4b40      	ldr	r3, [pc, #256]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a3f      	ldr	r2, [pc, #252]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038d6:	f043 0308 	orr.w	r3, r3, #8
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b3d      	ldr	r3, [pc, #244]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	493a      	ldr	r1, [pc, #232]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	4935      	ldr	r1, [pc, #212]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
 8003902:	e01a      	b.n	800393a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003904:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a32      	ldr	r2, [pc, #200]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003910:	f7fd f86e 	bl	80009f0 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003918:	f7fd f86a 	bl	80009f0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e323      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800392a:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x1dc>
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003938:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d073      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d005      	beq.n	8003958 <HAL_RCC_OscConfig+0x21c>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d10e      	bne.n	8003970 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d10b      	bne.n	8003970 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d063      	beq.n	8003a2c <HAL_RCC_OscConfig+0x2f0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d15f      	bne.n	8003a2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e300      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x24c>
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e01d      	b.n	80039c4 <HAL_RCC_OscConfig+0x288>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x270>
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 8003998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e00b      	b.n	80039c4 <HAL_RCC_OscConfig+0x288>
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <HAL_RCC_OscConfig+0x298>)
 80039be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01b      	beq.n	8003a04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fd f810 	bl	80009f0 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d2:	e010      	b.n	80039f6 <HAL_RCC_OscConfig+0x2ba>
 80039d4:	40021000 	.word	0x40021000
 80039d8:	080092b0 	.word	0x080092b0
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fd f804 	bl	80009f0 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e2bd      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f6:	4baf      	ldr	r3, [pc, #700]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x2a8>
 8003a02:	e014      	b.n	8003a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fc fff4 	bl	80009f0 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fc fff0 	bl	80009f0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e2a9      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a1e:	4ba5      	ldr	r3, [pc, #660]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2d0>
 8003a2a:	e000      	b.n	8003a2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d060      	beq.n	8003afc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_OscConfig+0x310>
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d119      	bne.n	8003a7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d116      	bne.n	8003a7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a4c:	4b99      	ldr	r3, [pc, #612]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_OscConfig+0x328>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e286      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a64:	4b93      	ldr	r3, [pc, #588]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	4990      	ldr	r1, [pc, #576]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a78:	e040      	b.n	8003afc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d023      	beq.n	8003aca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a82:	4b8c      	ldr	r3, [pc, #560]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a8b      	ldr	r2, [pc, #556]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fc ffaf 	bl	80009f0 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fc ffab 	bl	80009f0 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e264      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa8:	4b82      	ldr	r3, [pc, #520]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b7f      	ldr	r3, [pc, #508]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	497c      	ldr	r1, [pc, #496]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
 8003ac8:	e018      	b.n	8003afc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b7a      	ldr	r3, [pc, #488]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fc ff8b 	bl	80009f0 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fc ff87 	bl	80009f0 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e240      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003af0:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03c      	beq.n	8003b82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b10:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b16:	4a67      	ldr	r2, [pc, #412]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fc ff66 	bl	80009f0 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b28:	f7fc ff62 	bl	80009f0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e21b      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b3a:	4b5e      	ldr	r3, [pc, #376]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCC_OscConfig+0x3ec>
 8003b48:	e01b      	b.n	8003b82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4a:	4b5a      	ldr	r3, [pc, #360]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b50:	4a58      	ldr	r2, [pc, #352]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fc ff49 	bl	80009f0 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b62:	f7fc ff45 	bl	80009f0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e1fe      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b74:	4b4f      	ldr	r3, [pc, #316]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ef      	bne.n	8003b62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80a6 	beq.w	8003cdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b90:	2300      	movs	r3, #0
 8003b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b94:	4b47      	ldr	r3, [pc, #284]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba0:	4b44      	ldr	r3, [pc, #272]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	4a43      	ldr	r2, [pc, #268]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003baa:	6593      	str	r3, [r2, #88]	; 0x58
 8003bac:	4b41      	ldr	r3, [pc, #260]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_RCC_OscConfig+0x57c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d118      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <HAL_RCC_OscConfig+0x57c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3a      	ldr	r2, [pc, #232]	; (8003cb8 <HAL_RCC_OscConfig+0x57c>)
 8003bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd4:	f7fc ff0c 	bl	80009f0 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bdc:	f7fc ff08 	bl	80009f0 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1c1      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bee:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <HAL_RCC_OscConfig+0x57c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d108      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4d8>
 8003c02:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c12:	e024      	b.n	8003c5e <HAL_RCC_OscConfig+0x522>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b05      	cmp	r3, #5
 8003c1a:	d110      	bne.n	8003c3e <HAL_RCC_OscConfig+0x502>
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c3c:	e00f      	b.n	8003c5e <HAL_RCC_OscConfig+0x522>
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c4e:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c56:	f023 0304 	bic.w	r3, r3, #4
 8003c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d016      	beq.n	8003c94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c66:	f7fc fec3 	bl	80009f0 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6e:	f7fc febf 	bl	80009f0 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e176      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCC_OscConfig+0x578>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ed      	beq.n	8003c6e <HAL_RCC_OscConfig+0x532>
 8003c92:	e01a      	b.n	8003cca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fc feac 	bl	80009f0 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c9a:	e00f      	b.n	8003cbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fc fea8 	bl	80009f0 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d906      	bls.n	8003cbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e15f      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cbc:	4baa      	ldr	r3, [pc, #680]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e8      	bne.n	8003c9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cca:	7ffb      	ldrb	r3, [r7, #31]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd0:	4ba5      	ldr	r3, [pc, #660]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	4aa4      	ldr	r2, [pc, #656]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d03c      	beq.n	8003d62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cf0:	4b9d      	ldr	r3, [pc, #628]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf6:	4a9c      	ldr	r2, [pc, #624]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fc fe76 	bl	80009f0 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d08:	f7fc fe72 	bl	80009f0 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e12b      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d1a:	4b93      	ldr	r3, [pc, #588]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ef      	beq.n	8003d08 <HAL_RCC_OscConfig+0x5cc>
 8003d28:	e01b      	b.n	8003d62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d2a:	4b8f      	ldr	r3, [pc, #572]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d30:	4a8d      	ldr	r2, [pc, #564]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fc fe59 	bl	80009f0 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d42:	f7fc fe55 	bl	80009f0 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e10e      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d54:	4b84      	ldr	r3, [pc, #528]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ef      	bne.n	8003d42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8102 	beq.w	8003f70 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	f040 80c5 	bne.w	8003f00 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d76:	4b7c      	ldr	r3, [pc, #496]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 0203 	and.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d12c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	3b01      	subs	r3, #1
 8003d96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d123      	bne.n	8003de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d11b      	bne.n	8003de4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d113      	bne.n	8003de4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d109      	bne.n	8003de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d067      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	d062      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dea:	4b5f      	ldr	r3, [pc, #380]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e0bb      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a5a      	ldr	r2, [pc, #360]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003e00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e06:	f7fc fdf3 	bl	80009f0 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fc fdef 	bl	80009f0 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0a8      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e20:	4b51      	ldr	r3, [pc, #324]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2c:	4b4e      	ldr	r3, [pc, #312]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	4b4e      	ldr	r3, [pc, #312]	; (8003f6c <HAL_RCC_OscConfig+0x830>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e3c:	3a01      	subs	r2, #1
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	4311      	orrs	r1, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e46:	0212      	lsls	r2, r2, #8
 8003e48:	4311      	orrs	r1, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e4e:	0852      	lsrs	r2, r2, #1
 8003e50:	3a01      	subs	r2, #1
 8003e52:	0552      	lsls	r2, r2, #21
 8003e54:	4311      	orrs	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e5a:	0852      	lsrs	r2, r2, #1
 8003e5c:	3a01      	subs	r2, #1
 8003e5e:	0652      	lsls	r2, r2, #25
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e66:	06d2      	lsls	r2, r2, #27
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	493f      	ldr	r1, [pc, #252]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e70:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a39      	ldr	r2, [pc, #228]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e88:	f7fc fdb2 	bl	80009f0 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fc fdae 	bl	80009f0 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e067      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea2:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eae:	e05f      	b.n	8003f70 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e05e      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb4:	4b2c      	ldr	r3, [pc, #176]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d157      	bne.n	8003f70 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ec0:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ecc:	4b26      	ldr	r3, [pc, #152]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a25      	ldr	r2, [pc, #148]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ed8:	f7fc fd8a 	bl	80009f0 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fc fd86 	bl	80009f0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e03f      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x7a4>
 8003efe:	e037      	b.n	8003f70 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d02d      	beq.n	8003f62 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a17      	ldr	r2, [pc, #92]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f10:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003f24:	f023 0303 	bic.w	r3, r3, #3
 8003f28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f2a:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	4a0e      	ldr	r2, [pc, #56]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003f30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f38:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3a:	f7fc fd59 	bl	80009f0 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fc fd55 	bl	80009f0 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e00e      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <HAL_RCC_OscConfig+0x82c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f0      	bne.n	8003f42 <HAL_RCC_OscConfig+0x806>
 8003f60:	e006      	b.n	8003f70 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e005      	b.n	8003f72 <HAL_RCC_OscConfig+0x836>
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop

08003f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0c8      	b.n	8004122 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f90:	4b66      	ldr	r3, [pc, #408]	; (800412c <HAL_RCC_ClockConfig+0x1b0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d910      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b63      	ldr	r3, [pc, #396]	; (800412c <HAL_RCC_ClockConfig+0x1b0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 0207 	bic.w	r2, r3, #7
 8003fa6:	4961      	ldr	r1, [pc, #388]	; (800412c <HAL_RCC_ClockConfig+0x1b0>)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b5f      	ldr	r3, [pc, #380]	; (800412c <HAL_RCC_ClockConfig+0x1b0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0b0      	b.n	8004122 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d04c      	beq.n	8004066 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d107      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd4:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d121      	bne.n	8004024 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e09e      	b.n	8004122 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fec:	4b50      	ldr	r3, [pc, #320]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d115      	bne.n	8004024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e092      	b.n	8004122 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d107      	bne.n	8004014 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004004:	4b4a      	ldr	r3, [pc, #296]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e086      	b.n	8004122 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e07e      	b.n	8004122 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004024:	4b42      	ldr	r3, [pc, #264]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 0203 	bic.w	r2, r3, #3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	493f      	ldr	r1, [pc, #252]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004036:	f7fc fcdb 	bl	80009f0 <HAL_GetTick>
 800403a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403c:	e00a      	b.n	8004054 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403e:	f7fc fcd7 	bl	80009f0 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	; 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e066      	b.n	8004122 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004054:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 020c 	and.w	r2, r3, #12
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	429a      	cmp	r2, r3
 8004064:	d1eb      	bne.n	800403e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004072:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	492c      	ldr	r1, [pc, #176]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004084:	4b29      	ldr	r3, [pc, #164]	; (800412c <HAL_RCC_ClockConfig+0x1b0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d210      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b26      	ldr	r3, [pc, #152]	; (800412c <HAL_RCC_ClockConfig+0x1b0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 0207 	bic.w	r2, r3, #7
 800409a:	4924      	ldr	r1, [pc, #144]	; (800412c <HAL_RCC_ClockConfig+0x1b0>)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCC_ClockConfig+0x1b0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e036      	b.n	8004122 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4918      	ldr	r1, [pc, #96]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040de:	4b14      	ldr	r3, [pc, #80]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4910      	ldr	r1, [pc, #64]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040f2:	f000 f825 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80040f6:	4601      	mov	r1, r0
 80040f8:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <HAL_RCC_ClockConfig+0x1b4>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	5cd3      	ldrb	r3, [r2, r3]
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	fa21 f303 	lsr.w	r3, r1, r3
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004112:	4b0a      	ldr	r3, [pc, #40]	; (800413c <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc fc1a 	bl	8000950 <HAL_InitTick>
 800411c:	4603      	mov	r3, r0
 800411e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004120:	7afb      	ldrb	r3, [r7, #11]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40022000 	.word	0x40022000
 8004130:	40021000 	.word	0x40021000
 8004134:	080092b0 	.word	0x080092b0
 8004138:	20000000 	.word	0x20000000
 800413c:	20000004 	.word	0x20000004

08004140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	b089      	sub	sp, #36	; 0x24
 8004144:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414e:	4b3d      	ldr	r3, [pc, #244]	; (8004244 <HAL_RCC_GetSysClockFreq+0x104>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004158:	4b3a      	ldr	r3, [pc, #232]	; (8004244 <HAL_RCC_GetSysClockFreq+0x104>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x34>
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b0c      	cmp	r3, #12
 800416c:	d121      	bne.n	80041b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d11e      	bne.n	80041b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004174:	4b33      	ldr	r3, [pc, #204]	; (8004244 <HAL_RCC_GetSysClockFreq+0x104>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d107      	bne.n	8004190 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004180:	4b30      	ldr	r3, [pc, #192]	; (8004244 <HAL_RCC_GetSysClockFreq+0x104>)
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	e005      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004190:	4b2c      	ldr	r3, [pc, #176]	; (8004244 <HAL_RCC_GetSysClockFreq+0x104>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800419c:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <HAL_RCC_GetSysClockFreq+0x108>)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10d      	bne.n	80041c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d102      	bne.n	80041be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041b8:	4b24      	ldr	r3, [pc, #144]	; (800424c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	e004      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041c4:	4b22      	ldr	r3, [pc, #136]	; (8004250 <HAL_RCC_GetSysClockFreq+0x110>)
 80041c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b0c      	cmp	r3, #12
 80041cc:	d133      	bne.n	8004236 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ce:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HAL_RCC_GetSysClockFreq+0x104>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d002      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0xa4>
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d003      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0xaa>
 80041e2:	e005      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041e6:	617b      	str	r3, [r7, #20]
      break;
 80041e8:	e005      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041ea:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ec:	617b      	str	r3, [r7, #20]
      break;
 80041ee:	e002      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	617b      	str	r3, [r7, #20]
      break;
 80041f4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041f6:	4b13      	ldr	r3, [pc, #76]	; (8004244 <HAL_RCC_GetSysClockFreq+0x104>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	3301      	adds	r3, #1
 8004202:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_RCC_GetSysClockFreq+0x104>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	0a1b      	lsrs	r3, r3, #8
 800420a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	fb02 f203 	mul.w	r2, r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RCC_GetSysClockFreq+0x104>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	0e5b      	lsrs	r3, r3, #25
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	3301      	adds	r3, #1
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004236:	69bb      	ldr	r3, [r7, #24]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3724      	adds	r7, #36	; 0x24
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40021000 	.word	0x40021000
 8004248:	080092c0 	.word	0x080092c0
 800424c:	00f42400 	.word	0x00f42400
 8004250:	007a1200 	.word	0x007a1200

08004254 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004260:	4b2a      	ldr	r3, [pc, #168]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800426c:	f7ff f9f2 	bl	8003654 <HAL_PWREx_GetVoltageRange>
 8004270:	6178      	str	r0, [r7, #20]
 8004272:	e014      	b.n	800429e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004274:	4b25      	ldr	r3, [pc, #148]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004278:	4a24      	ldr	r2, [pc, #144]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427e:	6593      	str	r3, [r2, #88]	; 0x58
 8004280:	4b22      	ldr	r3, [pc, #136]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800428c:	f7ff f9e2 	bl	8003654 <HAL_PWREx_GetVoltageRange>
 8004290:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004292:	4b1e      	ldr	r3, [pc, #120]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d10b      	bne.n	80042be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d919      	bls.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2ba0      	cmp	r3, #160	; 0xa0
 80042b0:	d902      	bls.n	80042b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042b2:	2302      	movs	r3, #2
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e013      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b8:	2301      	movs	r3, #1
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	e010      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d902      	bls.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042c4:	2303      	movs	r3, #3
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	e00a      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d102      	bne.n	80042d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042d0:	2302      	movs	r3, #2
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	e004      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b70      	cmp	r3, #112	; 0x70
 80042da:	d101      	bne.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042dc:	2301      	movs	r3, #1
 80042de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f023 0207 	bic.w	r2, r3, #7
 80042e8:	4909      	ldr	r1, [pc, #36]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d001      	beq.n	8004302 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000
 8004310:	40022000 	.word	0x40022000

08004314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800431c:	2300      	movs	r3, #0
 800431e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004320:	2300      	movs	r3, #0
 8004322:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02f      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004338:	d005      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800433a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800433e:	d015      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004344:	e00f      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004346:	4b5d      	ldr	r3, [pc, #372]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	4a5c      	ldr	r2, [pc, #368]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004352:	e00c      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fa1e 	bl	800479c <RCCEx_PLLSAI1_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004364:	e003      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	74fb      	strb	r3, [r7, #19]
      break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800436c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004374:	4b51      	ldr	r3, [pc, #324]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	494e      	ldr	r1, [pc, #312]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800438a:	e001      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 809e 	beq.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043a2:	4b46      	ldr	r3, [pc, #280]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	4a3f      	ldr	r2, [pc, #252]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c2:	6593      	str	r3, [r2, #88]	; 0x58
 80043c4:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d0:	2301      	movs	r3, #1
 80043d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d4:	4b3a      	ldr	r3, [pc, #232]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a39      	ldr	r2, [pc, #228]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e0:	f7fc fb06 	bl	80009f0 <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e6:	e009      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fc fb02 	bl	80009f0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d902      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	74fb      	strb	r3, [r7, #19]
        break;
 80043fa:	e005      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043fc:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d15a      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800440e:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004418:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01e      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	429a      	cmp	r2, r3
 8004428:	d019      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004434:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004436:	4b21      	ldr	r3, [pc, #132]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800443e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004446:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444c:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800444e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004456:	4a19      	ldr	r2, [pc, #100]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d016      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fc fac2 	bl	80009f0 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446e:	e00b      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fc fabe 	bl	80009f0 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d902      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	74fb      	strb	r3, [r7, #19]
            break;
 8004486:	e006      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0ec      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8004496:	7cfb      	ldrb	r3, [r7, #19]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10b      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449c:	4b07      	ldr	r3, [pc, #28]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	4904      	ldr	r1, [pc, #16]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	74bb      	strb	r3, [r7, #18]
 80044b8:	e006      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c8:	7c7b      	ldrb	r3, [r7, #17]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4bb2      	ldr	r3, [pc, #712]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	4ab1      	ldr	r2, [pc, #708]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e6:	4bac      	ldr	r3, [pc, #688]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f023 0203 	bic.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	49a8      	ldr	r1, [pc, #672]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004508:	4ba3      	ldr	r3, [pc, #652]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f023 020c 	bic.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	49a0      	ldr	r1, [pc, #640]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800452a:	4b9b      	ldr	r3, [pc, #620]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	4997      	ldr	r1, [pc, #604]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800454c:	4b92      	ldr	r3, [pc, #584]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	498f      	ldr	r1, [pc, #572]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800456e:	4b8a      	ldr	r3, [pc, #552]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457c:	4986      	ldr	r1, [pc, #536]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004590:	4b81      	ldr	r3, [pc, #516]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	497e      	ldr	r1, [pc, #504]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b2:	4b79      	ldr	r3, [pc, #484]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	4975      	ldr	r1, [pc, #468]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045d4:	4b70      	ldr	r3, [pc, #448]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e2:	496d      	ldr	r1, [pc, #436]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f6:	4b68      	ldr	r3, [pc, #416]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	4964      	ldr	r1, [pc, #400]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d028      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004618:	4b5f      	ldr	r3, [pc, #380]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004626:	495c      	ldr	r1, [pc, #368]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004636:	d106      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004638:	4b57      	ldr	r3, [pc, #348]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a56      	ldr	r2, [pc, #344]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800463e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004642:	60d3      	str	r3, [r2, #12]
 8004644:	e011      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800464e:	d10c      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f8a0 	bl	800479c <RCCEx_PLLSAI1_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d028      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004676:	4b48      	ldr	r3, [pc, #288]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004684:	4944      	ldr	r1, [pc, #272]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004694:	d106      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004696:	4b40      	ldr	r3, [pc, #256]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4a3f      	ldr	r2, [pc, #252]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800469c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a0:	60d3      	str	r3, [r2, #12]
 80046a2:	e011      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046ac:	d10c      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	2101      	movs	r1, #1
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 f871 	bl	800479c <RCCEx_PLLSAI1_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d028      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046d4:	4b30      	ldr	r3, [pc, #192]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e2:	492d      	ldr	r1, [pc, #180]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f2:	d106      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046f4:	4b28      	ldr	r3, [pc, #160]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	4a27      	ldr	r2, [pc, #156]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80046fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046fe:	60d3      	str	r3, [r2, #12]
 8004700:	e011      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004706:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800470a:	d10c      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	2101      	movs	r1, #1
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f842 	bl	800479c <RCCEx_PLLSAI1_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800471c:	7cfb      	ldrb	r3, [r7, #19]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8004722:	7cfb      	ldrb	r3, [r7, #19]
 8004724:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01c      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004732:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	4915      	ldr	r1, [pc, #84]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004750:	d10c      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	2102      	movs	r1, #2
 8004758:	4618      	mov	r0, r3
 800475a:	f000 f81f 	bl	800479c <RCCEx_PLLSAI1_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004778:	4b07      	ldr	r3, [pc, #28]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	4904      	ldr	r1, [pc, #16]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800478e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000

0800479c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047aa:	4b73      	ldr	r3, [pc, #460]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d018      	beq.n	80047e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047b6:	4b70      	ldr	r3, [pc, #448]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0203 	and.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d10d      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047ce:	4b6a      	ldr	r3, [pc, #424]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
       ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d044      	beq.n	800486c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
 80047e6:	e041      	b.n	800486c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d00c      	beq.n	800480a <RCCEx_PLLSAI1_Config+0x6e>
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d013      	beq.n	800481c <RCCEx_PLLSAI1_Config+0x80>
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d120      	bne.n	800483a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047f8:	4b5f      	ldr	r3, [pc, #380]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11d      	bne.n	8004840 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004808:	e01a      	b.n	8004840 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800480a:	4b5b      	ldr	r3, [pc, #364]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800481a:	e013      	b.n	8004844 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800481c:	4b56      	ldr	r3, [pc, #344]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10f      	bne.n	8004848 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004828:	4b53      	ldr	r3, [pc, #332]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d109      	bne.n	8004848 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004838:	e006      	b.n	8004848 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
      break;
 800483e:	e004      	b.n	800484a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004840:	bf00      	nop
 8004842:	e002      	b.n	800484a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004844:	bf00      	nop
 8004846:	e000      	b.n	800484a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004848:	bf00      	nop
    }

    if(status == HAL_OK)
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10d      	bne.n	800486c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004850:	4b49      	ldr	r3, [pc, #292]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	3b01      	subs	r3, #1
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	430b      	orrs	r3, r1
 8004866:	4944      	ldr	r1, [pc, #272]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d17c      	bne.n	800496c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004872:	4b41      	ldr	r3, [pc, #260]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a40      	ldr	r2, [pc, #256]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004878:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800487c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487e:	f7fc f8b7 	bl	80009f0 <HAL_GetTick>
 8004882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004884:	e009      	b.n	800489a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004886:	f7fc f8b3 	bl	80009f0 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d902      	bls.n	800489a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	73fb      	strb	r3, [r7, #15]
        break;
 8004898:	e005      	b.n	80048a6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800489a:	4b37      	ldr	r3, [pc, #220]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ef      	bne.n	8004886 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d15f      	bne.n	800496c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d110      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b2:	4b31      	ldr	r3, [pc, #196]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80048ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6892      	ldr	r2, [r2, #8]
 80048c2:	0211      	lsls	r1, r2, #8
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	68d2      	ldr	r2, [r2, #12]
 80048c8:	06d2      	lsls	r2, r2, #27
 80048ca:	430a      	orrs	r2, r1
 80048cc:	492a      	ldr	r1, [pc, #168]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	610b      	str	r3, [r1, #16]
 80048d2:	e027      	b.n	8004924 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d112      	bne.n	8004900 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048da:	4b27      	ldr	r3, [pc, #156]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6892      	ldr	r2, [r2, #8]
 80048ea:	0211      	lsls	r1, r2, #8
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6912      	ldr	r2, [r2, #16]
 80048f0:	0852      	lsrs	r2, r2, #1
 80048f2:	3a01      	subs	r2, #1
 80048f4:	0552      	lsls	r2, r2, #21
 80048f6:	430a      	orrs	r2, r1
 80048f8:	491f      	ldr	r1, [pc, #124]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	610b      	str	r3, [r1, #16]
 80048fe:	e011      	b.n	8004924 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004900:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004908:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6892      	ldr	r2, [r2, #8]
 8004910:	0211      	lsls	r1, r2, #8
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6952      	ldr	r2, [r2, #20]
 8004916:	0852      	lsrs	r2, r2, #1
 8004918:	3a01      	subs	r2, #1
 800491a:	0652      	lsls	r2, r2, #25
 800491c:	430a      	orrs	r2, r1
 800491e:	4916      	ldr	r1, [pc, #88]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004920:	4313      	orrs	r3, r2
 8004922:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a13      	ldr	r2, [pc, #76]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 800492a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800492e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004930:	f7fc f85e 	bl	80009f0 <HAL_GetTick>
 8004934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004936:	e009      	b.n	800494c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004938:	f7fc f85a 	bl	80009f0 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d902      	bls.n	800494c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	73fb      	strb	r3, [r7, #15]
          break;
 800494a:	e005      	b.n	8004958 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ef      	beq.n	8004938 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	4904      	ldr	r1, [pc, #16]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004968:	4313      	orrs	r3, r2
 800496a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000

0800497c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d06c      	beq.n	8004a68 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fb fed2 	bl	800074c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	22ca      	movs	r2, #202	; 0xca
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2253      	movs	r2, #83	; 0x53
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f87c 	bl	8004abe <RTC_EnterInitMode>
 80049c6:	4603      	mov	r3, r0
 80049c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d14b      	bne.n	8004a68 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68d2      	ldr	r2, [r2, #12]
 8004a0a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6919      	ldr	r1, [r3, #16]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	041a      	lsls	r2, r3, #16
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f87f 	bl	8004b24 <RTC_ExitInitMode>
 8004a26:	4603      	mov	r3, r0
 8004a28:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d11b      	bne.n	8004a68 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0203 	bic.w	r2, r2, #3
 8004a3e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	22ff      	movs	r2, #255	; 0xff
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a88:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004a8a:	f7fb ffb1 	bl	80009f0 <HAL_GetTick>
 8004a8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a90:	e009      	b.n	8004aa6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a92:	f7fb ffad 	bl	80009f0 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e007      	b.n	8004ab6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ee      	beq.n	8004a92 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d120      	bne.n	8004b1a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ae2:	f7fb ff85 	bl	80009f0 <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ae8:	e00d      	b.n	8004b06 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004aea:	f7fb ff81 	bl	80009f0 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004af8:	d905      	bls.n	8004b06 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2203      	movs	r2, #3
 8004b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <RTC_EnterInitMode+0x5c>
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d1e7      	bne.n	8004aea <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004b30:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <RTC_ExitInitMode+0x78>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <RTC_ExitInitMode+0x78>)
 8004b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004b3c:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <RTC_ExitInitMode+0x78>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10c      	bne.n	8004b62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff92 	bl	8004a72 <HAL_RTC_WaitForSynchro>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01e      	beq.n	8004b92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2203      	movs	r2, #3
 8004b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	73fb      	strb	r3, [r7, #15]
 8004b60:	e017      	b.n	8004b92 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b62:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <RTC_ExitInitMode+0x78>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	4a0d      	ldr	r2, [pc, #52]	; (8004b9c <RTC_ExitInitMode+0x78>)
 8004b68:	f023 0320 	bic.w	r3, r3, #32
 8004b6c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff ff7f 	bl	8004a72 <HAL_RTC_WaitForSynchro>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <RTC_ExitInitMode+0x78>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <RTC_ExitInitMode+0x78>)
 8004b8c:	f043 0320 	orr.w	r3, r3, #32
 8004b90:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40002800 	.word	0x40002800

08004ba0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	f107 0014 	add.w	r0, r7, #20
 8004bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	b004      	add	sp, #16
 8004bc0:	4770      	bx	lr

08004bc2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bd2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004bd6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bf8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004bfc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	4013      	ands	r3, r2
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c40:	b084      	sub	sp, #16
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	f107 0014 	add.w	r0, r7, #20
 8004c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	b004      	add	sp, #16
 8004c80:	4770      	bx	lr
	...

08004c84 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b09b      	sub	sp, #108	; 0x6c
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	78db      	ldrb	r3, [r3, #3]
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d81f      	bhi.n	8004cf6 <USB_ActivateEndpoint+0x72>
 8004cb6:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <USB_ActivateEndpoint+0x38>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004ccd 	.word	0x08004ccd
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004cff 	.word	0x08004cff
 8004cc8:	08004cdb 	.word	0x08004cdb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ccc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cd8:	e012      	b.n	8004d00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004cda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cde:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004ce2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ce6:	e00b      	b.n	8004d00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ce8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cf0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cf4:	e004      	b.n	8004d00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004cfc:	e000      	b.n	8004d00 <USB_ActivateEndpoint+0x7c>
      break;
 8004cfe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	b21b      	sxth	r3, r3
 8004d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	b21a      	sxth	r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	b21b      	sxth	r3, r3
 8004d42:	4313      	orrs	r3, r2
 8004d44:	b21b      	sxth	r3, r3
 8004d46:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	441a      	add	r2, r3
 8004d54:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	7b1b      	ldrb	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f040 8149 	bne.w	8005008 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 8084 	beq.w	8004e88 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	4413      	add	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	00da      	lsls	r2, r3, #3
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	88db      	ldrh	r3, [r3, #6]
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	81fb      	strh	r3, [r7, #14]
 8004dc2:	89fb      	ldrh	r3, [r7, #14]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01b      	beq.n	8004e04 <USB_ActivateEndpoint+0x180>
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	81bb      	strh	r3, [r7, #12]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	441a      	add	r2, r3
 8004dee:	89bb      	ldrh	r3, [r7, #12]
 8004df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	78db      	ldrb	r3, [r3, #3]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d020      	beq.n	8004e4e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e22:	813b      	strh	r3, [r7, #8]
 8004e24:	893b      	ldrh	r3, [r7, #8]
 8004e26:	f083 0320 	eor.w	r3, r3, #32
 8004e2a:	813b      	strh	r3, [r7, #8]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	893b      	ldrh	r3, [r7, #8]
 8004e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8013      	strh	r3, [r2, #0]
 8004e4c:	e27f      	b.n	800534e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e64:	817b      	strh	r3, [r7, #10]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	441a      	add	r2, r3
 8004e70:	897b      	ldrh	r3, [r7, #10]
 8004e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8013      	strh	r3, [r2, #0]
 8004e86:	e262      	b.n	800534e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	4413      	add	r3, r2
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	00da      	lsls	r2, r3, #3
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	88db      	ldrh	r3, [r3, #6]
 8004eb0:	085b      	lsrs	r3, r3, #1
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	4413      	add	r3, r2
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	00da      	lsls	r2, r3, #3
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	4413      	add	r3, r2
 8004eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d112      	bne.n	8004f0e <USB_ActivateEndpoint+0x28a>
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	e02f      	b.n	8004f6e <USB_ActivateEndpoint+0x2ea>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b3e      	cmp	r3, #62	; 0x3e
 8004f14:	d813      	bhi.n	8004f3e <USB_ActivateEndpoint+0x2ba>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <USB_ActivateEndpoint+0x2ac>
 8004f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	029b      	lsls	r3, r3, #10
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	801a      	strh	r2, [r3, #0]
 8004f3c:	e017      	b.n	8004f6e <USB_ActivateEndpoint+0x2ea>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	663b      	str	r3, [r7, #96]	; 0x60
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <USB_ActivateEndpoint+0x2d4>
 8004f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f54:	3b01      	subs	r3, #1
 8004f56:	663b      	str	r3, [r7, #96]	; 0x60
 8004f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	029b      	lsls	r3, r3, #10
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	83fb      	strh	r3, [r7, #30]
 8004f7c:	8bfb      	ldrh	r3, [r7, #30]
 8004f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01b      	beq.n	8004fbe <USB_ActivateEndpoint+0x33a>
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	83bb      	strh	r3, [r7, #28]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	8bbb      	ldrh	r3, [r7, #28]
 8004faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd4:	837b      	strh	r3, [r7, #26]
 8004fd6:	8b7b      	ldrh	r3, [r7, #26]
 8004fd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fdc:	837b      	strh	r3, [r7, #26]
 8004fde:	8b7b      	ldrh	r3, [r7, #26]
 8004fe0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fe4:	837b      	strh	r3, [r7, #26]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	8b7b      	ldrh	r3, [r7, #26]
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]
 8005006:	e1a2      	b.n	800534e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005038:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	b29b      	uxth	r3, r3
 8005042:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	65bb      	str	r3, [r7, #88]	; 0x58
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504e:	b29b      	uxth	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005054:	4413      	add	r3, r2
 8005056:	65bb      	str	r3, [r7, #88]	; 0x58
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	00da      	lsls	r2, r3, #3
 800505e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005060:	4413      	add	r3, r2
 8005062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005066:	657b      	str	r3, [r7, #84]	; 0x54
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	891b      	ldrh	r3, [r3, #8]
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	b29b      	uxth	r3, r3
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	653b      	str	r3, [r7, #80]	; 0x50
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005082:	b29b      	uxth	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005088:	4413      	add	r3, r2
 800508a:	653b      	str	r3, [r7, #80]	; 0x50
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	00da      	lsls	r2, r3, #3
 8005092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005094:	4413      	add	r3, r2
 8005096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	895b      	ldrh	r3, [r3, #10]
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f040 8091 	bne.w	80051d8 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80050c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01b      	beq.n	8005106 <USB_ActivateEndpoint+0x482>
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	441a      	add	r2, r3
 80050f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80050f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005102:	b29b      	uxth	r3, r3
 8005104:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	873b      	strh	r3, [r7, #56]	; 0x38
 8005114:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01b      	beq.n	8005156 <USB_ActivateEndpoint+0x4d2>
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005134:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	441a      	add	r2, r3
 8005140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800514e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005152:	b29b      	uxth	r3, r3
 8005154:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800516e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005170:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005174:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005176:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005178:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800517c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b4:	867b      	strh	r3, [r7, #50]	; 0x32
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]
 80051d6:	e0ba      	b.n	800534e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80051e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80051ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01d      	beq.n	8005230 <USB_ActivateEndpoint+0x5ac>
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	441a      	add	r2, r3
 8005218:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800521c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522c:	b29b      	uxth	r3, r3
 800522e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005240:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01d      	beq.n	8005288 <USB_ActivateEndpoint+0x604>
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005262:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005284:	b29b      	uxth	r3, r3
 8005286:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	78db      	ldrb	r3, [r3, #3]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d024      	beq.n	80052da <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052ae:	f083 0320 	eor.w	r3, r3, #32
 80052b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	441a      	add	r2, r3
 80052c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	8013      	strh	r3, [r2, #0]
 80052d8:	e01d      	b.n	8005316 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	441a      	add	r2, r3
 80052fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005312:	b29b      	uxth	r3, r3
 8005314:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	441a      	add	r2, r3
 8005338:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800533a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534a:	b29b      	uxth	r3, r3
 800534c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800534e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005352:	4618      	mov	r0, r3
 8005354:	376c      	adds	r7, #108	; 0x6c
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop

08005360 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005360:	b480      	push	{r7}
 8005362:	b08d      	sub	sp, #52	; 0x34
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	7b1b      	ldrb	r3, [r3, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 808e 	bne.w	8005490 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d044      	beq.n	8005406 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	81bb      	strh	r3, [r7, #12]
 800538a:	89bb      	ldrh	r3, [r7, #12]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01b      	beq.n	80053cc <USB_DeactivateEndpoint+0x6c>
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	817b      	strh	r3, [r7, #10]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	897b      	ldrh	r3, [r7, #10]
 80053b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e2:	813b      	strh	r3, [r7, #8]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	893b      	ldrh	r3, [r7, #8]
 80053f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005400:	b29b      	uxth	r3, r3
 8005402:	8013      	strh	r3, [r2, #0]
 8005404:	e192      	b.n	800572c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	827b      	strh	r3, [r7, #18]
 8005414:	8a7b      	ldrh	r3, [r7, #18]
 8005416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01b      	beq.n	8005456 <USB_DeactivateEndpoint+0xf6>
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005434:	823b      	strh	r3, [r7, #16]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	441a      	add	r2, r3
 8005440:	8a3b      	ldrh	r3, [r7, #16]
 8005442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800544e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005452:	b29b      	uxth	r3, r3
 8005454:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546c:	81fb      	strh	r3, [r7, #14]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	89fb      	ldrh	r3, [r7, #14]
 800547a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548a:	b29b      	uxth	r3, r3
 800548c:	8013      	strh	r3, [r2, #0]
 800548e:	e14d      	b.n	800572c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f040 80a5 	bne.w	80055e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	843b      	strh	r3, [r7, #32]
 80054a8:	8c3b      	ldrh	r3, [r7, #32]
 80054aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01b      	beq.n	80054ea <USB_DeactivateEndpoint+0x18a>
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	83fb      	strh	r3, [r7, #30]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	8bfb      	ldrh	r3, [r7, #30]
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	83bb      	strh	r3, [r7, #28]
 80054f8:	8bbb      	ldrh	r3, [r7, #28]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01b      	beq.n	800553a <USB_DeactivateEndpoint+0x1da>
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005518:	837b      	strh	r3, [r7, #26]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	441a      	add	r2, r3
 8005524:	8b7b      	ldrh	r3, [r7, #26]
 8005526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005532:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005536:	b29b      	uxth	r3, r3
 8005538:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005550:	833b      	strh	r3, [r7, #24]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	441a      	add	r2, r3
 800555c:	8b3b      	ldrh	r3, [r7, #24]
 800555e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800556e:	b29b      	uxth	r3, r3
 8005570:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005588:	82fb      	strh	r3, [r7, #22]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	441a      	add	r2, r3
 8005594:	8afb      	ldrh	r3, [r7, #22]
 8005596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c0:	82bb      	strh	r3, [r7, #20]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	8abb      	ldrh	r3, [r7, #20]
 80055ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]
 80055e2:	e0a3      	b.n	800572c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <USB_DeactivateEndpoint+0x2d4>
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800562c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005630:	b29b      	uxth	r3, r3
 8005632:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01b      	beq.n	8005684 <USB_DeactivateEndpoint+0x324>
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	853b      	strh	r3, [r7, #40]	; 0x28
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	441a      	add	r2, r3
 800566e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005680:	b29b      	uxth	r3, r3
 8005682:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	441a      	add	r2, r3
 80056a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	441a      	add	r2, r3
 80056de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	847b      	strh	r3, [r7, #34]	; 0x22
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005728:	b29b      	uxth	r3, r3
 800572a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3734      	adds	r7, #52	; 0x34
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b0c4      	sub	sp, #272	; 0x110
 800573e:	af00      	add	r7, sp, #0
 8005740:	1d3b      	adds	r3, r7, #4
 8005742:	6018      	str	r0, [r3, #0]
 8005744:	463b      	mov	r3, r7
 8005746:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005748:	463b      	mov	r3, r7
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	2b01      	cmp	r3, #1
 8005750:	f040 8566 	bne.w	8006220 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005754:	463b      	mov	r3, r7
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	463b      	mov	r3, r7
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	d905      	bls.n	8005770 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005764:	463b      	mov	r3, r7
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800576e:	e004      	b.n	800577a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005770:	463b      	mov	r3, r7
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800577a:	463b      	mov	r3, r7
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	7b1b      	ldrb	r3, [r3, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d12c      	bne.n	80057de <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005784:	463b      	mov	r3, r7
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6959      	ldr	r1, [r3, #20]
 800578a:	463b      	mov	r3, r7
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	88da      	ldrh	r2, [r3, #6]
 8005790:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005794:	b29b      	uxth	r3, r3
 8005796:	1d38      	adds	r0, r7, #4
 8005798:	6800      	ldr	r0, [r0, #0]
 800579a:	f001 fa58 	bl	8006c4e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	1d3b      	adds	r3, r7, #4
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4413      	add	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	00da      	lsls	r2, r3, #3
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	4413      	add	r3, r2
 80057c2:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80057c6:	f107 0310 	add.w	r3, r7, #16
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	f107 0310 	add.w	r3, r7, #16
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	f000 bcec 	b.w	80061b6 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80057de:	463b      	mov	r3, r7
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	78db      	ldrb	r3, [r3, #3]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	f040 8356 	bne.w	8005e96 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80057ea:	463b      	mov	r3, r7
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6a1a      	ldr	r2, [r3, #32]
 80057f0:	463b      	mov	r3, r7
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	f240 82fa 	bls.w	8005df0 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	463b      	mov	r3, r7
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005816:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	463b      	mov	r3, r7
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	441a      	add	r2, r3
 8005828:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800582c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005834:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583c:	b29b      	uxth	r3, r3
 800583e:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005840:	463b      	mov	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800584a:	463b      	mov	r3, r7
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	463b      	mov	r3, r7
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800585c:	1d3b      	adds	r3, r7, #4
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 815e 	beq.w	8005b34 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005878:	1d3b      	adds	r3, r7, #4
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	463b      	mov	r3, r7
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d164      	bne.n	8005952 <USB_EPStartXfer+0x218>
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005896:	b29b      	uxth	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	4413      	add	r3, r2
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	00da      	lsls	r2, r3, #3
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	4413      	add	r3, r2
 80058ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d112      	bne.n	80058e0 <USB_EPStartXfer+0x1a6>
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d8:	b29a      	uxth	r2, r3
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	801a      	strh	r2, [r3, #0]
 80058de:	e054      	b.n	800598a <USB_EPStartXfer+0x250>
 80058e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058e4:	2b3e      	cmp	r3, #62	; 0x3e
 80058e6:	d817      	bhi.n	8005918 <USB_EPStartXfer+0x1de>
 80058e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ec:	085b      	lsrs	r3, r3, #1
 80058ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <USB_EPStartXfer+0x1ce>
 80058fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005902:	3301      	adds	r3, #1
 8005904:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590c:	b29b      	uxth	r3, r3
 800590e:	029b      	lsls	r3, r3, #10
 8005910:	b29a      	uxth	r2, r3
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	e038      	b.n	800598a <USB_EPStartXfer+0x250>
 8005918:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005922:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <USB_EPStartXfer+0x1fe>
 800592e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005932:	3b01      	subs	r3, #1
 8005934:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593c:	b29b      	uxth	r3, r3
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	b29b      	uxth	r3, r3
 8005942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800594a:	b29a      	uxth	r2, r3
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	e01b      	b.n	800598a <USB_EPStartXfer+0x250>
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d116      	bne.n	800598a <USB_EPStartXfer+0x250>
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005964:	b29b      	uxth	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	4413      	add	r3, r2
 800596c:	637b      	str	r3, [r7, #52]	; 0x34
 800596e:	463b      	mov	r3, r7
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	00da      	lsls	r2, r3, #3
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005978:	4413      	add	r3, r2
 800597a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800597e:	633b      	str	r3, [r7, #48]	; 0x30
 8005980:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005984:	b29a      	uxth	r2, r3
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800598a:	463b      	mov	r3, r7
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	895b      	ldrh	r3, [r3, #10]
 8005990:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005994:	463b      	mov	r3, r7
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6959      	ldr	r1, [r3, #20]
 800599a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80059a4:	1d38      	adds	r0, r7, #4
 80059a6:	6800      	ldr	r0, [r0, #0]
 80059a8:	f001 f951 	bl	8006c4e <USB_WritePMA>
            ep->xfer_buff += len;
 80059ac:	463b      	mov	r3, r7
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059b6:	441a      	add	r2, r3
 80059b8:	463b      	mov	r3, r7
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059be:	463b      	mov	r3, r7
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	463b      	mov	r3, r7
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d90e      	bls.n	80059ec <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80059d8:	463b      	mov	r3, r7
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6a1a      	ldr	r2, [r3, #32]
 80059de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059e2:	1ad2      	subs	r2, r2, r3
 80059e4:	463b      	mov	r3, r7
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	621a      	str	r2, [r3, #32]
 80059ea:	e008      	b.n	80059fe <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80059ec:	463b      	mov	r3, r7
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80059f6:	463b      	mov	r3, r7
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2200      	movs	r2, #0
 80059fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059fe:	463b      	mov	r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d164      	bne.n	8005ad2 <USB_EPStartXfer+0x398>
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	1d3b      	adds	r3, r7, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	463b      	mov	r3, r7
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	00da      	lsls	r2, r3, #3
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d112      	bne.n	8005a60 <USB_EPStartXfer+0x326>
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	801a      	strh	r2, [r3, #0]
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	e057      	b.n	8005b10 <USB_EPStartXfer+0x3d6>
 8005a60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a64:	2b3e      	cmp	r3, #62	; 0x3e
 8005a66:	d817      	bhi.n	8005a98 <USB_EPStartXfer+0x35e>
 8005a68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <USB_EPStartXfer+0x34e>
 8005a7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a82:	3301      	adds	r3, #1
 8005a84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	029b      	lsls	r3, r3, #10
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	e03b      	b.n	8005b10 <USB_EPStartXfer+0x3d6>
 8005a98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005aa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <USB_EPStartXfer+0x37e>
 8005aae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ab8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	e01e      	b.n	8005b10 <USB_EPStartXfer+0x3d6>
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d119      	bne.n	8005b10 <USB_EPStartXfer+0x3d6>
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	4413      	add	r3, r2
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	00da      	lsls	r2, r3, #3
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	4413      	add	r3, r2
 8005b00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b04:	623b      	str	r3, [r7, #32]
 8005b06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	891b      	ldrh	r3, [r3, #8]
 8005b16:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6959      	ldr	r1, [r3, #20]
 8005b20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005b2a:	1d38      	adds	r0, r7, #4
 8005b2c:	6800      	ldr	r0, [r0, #0]
 8005b2e:	f001 f88e 	bl	8006c4e <USB_WritePMA>
 8005b32:	e340      	b.n	80061b6 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b34:	463b      	mov	r3, r7
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d164      	bne.n	8005c08 <USB_EPStartXfer+0x4ce>
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b44:	1d3b      	adds	r3, r7, #4
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b52:	4413      	add	r3, r2
 8005b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b56:	463b      	mov	r3, r7
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	00da      	lsls	r2, r3, #3
 8005b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b60:	4413      	add	r3, r2
 8005b62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d112      	bne.n	8005b96 <USB_EPStartXfer+0x45c>
 8005b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e057      	b.n	8005c46 <USB_EPStartXfer+0x50c>
 8005b96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9c:	d817      	bhi.n	8005bce <USB_EPStartXfer+0x494>
 8005b9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ba8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <USB_EPStartXfer+0x484>
 8005bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb8:	3301      	adds	r3, #1
 8005bba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	029b      	lsls	r3, r3, #10
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	e03b      	b.n	8005c46 <USB_EPStartXfer+0x50c>
 8005bce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <USB_EPStartXfer+0x4b4>
 8005be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be8:	3b01      	subs	r3, #1
 8005bea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	029b      	lsls	r3, r3, #10
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c04:	801a      	strh	r2, [r3, #0]
 8005c06:	e01e      	b.n	8005c46 <USB_EPStartXfer+0x50c>
 8005c08:	463b      	mov	r3, r7
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d119      	bne.n	8005c46 <USB_EPStartXfer+0x50c>
 8005c12:	1d3b      	adds	r3, r7, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	657b      	str	r3, [r7, #84]	; 0x54
 8005c18:	1d3b      	adds	r3, r7, #4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c26:	4413      	add	r3, r2
 8005c28:	657b      	str	r3, [r7, #84]	; 0x54
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	00da      	lsls	r2, r3, #3
 8005c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c34:	4413      	add	r3, r2
 8005c36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c46:	463b      	mov	r3, r7
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	891b      	ldrh	r3, [r3, #8]
 8005c4c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c50:	463b      	mov	r3, r7
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6959      	ldr	r1, [r3, #20]
 8005c56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005c60:	1d38      	adds	r0, r7, #4
 8005c62:	6800      	ldr	r0, [r0, #0]
 8005c64:	f000 fff3 	bl	8006c4e <USB_WritePMA>
            ep->xfer_buff += len;
 8005c68:	463b      	mov	r3, r7
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c72:	441a      	add	r2, r3
 8005c74:	463b      	mov	r3, r7
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	463b      	mov	r3, r7
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d90e      	bls.n	8005ca8 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005c94:	463b      	mov	r3, r7
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6a1a      	ldr	r2, [r3, #32]
 8005c9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	621a      	str	r2, [r3, #32]
 8005ca6:	e008      	b.n	8005cba <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ca8:	463b      	mov	r3, r7
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cba:	1d3b      	adds	r3, r7, #4
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d164      	bne.n	8005d94 <USB_EPStartXfer+0x65a>
 8005cca:	1d3b      	adds	r3, r7, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd0:	1d3b      	adds	r3, r7, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cde:	4413      	add	r3, r2
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	00da      	lsls	r2, r3, #3
 8005cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cec:	4413      	add	r3, r2
 8005cee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d112      	bne.n	8005d22 <USB_EPStartXfer+0x5e8>
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e054      	b.n	8005dcc <USB_EPStartXfer+0x692>
 8005d22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d26:	2b3e      	cmp	r3, #62	; 0x3e
 8005d28:	d817      	bhi.n	8005d5a <USB_EPStartXfer+0x620>
 8005d2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <USB_EPStartXfer+0x610>
 8005d40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d44:	3301      	adds	r3, #1
 8005d46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	029b      	lsls	r3, r3, #10
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	e038      	b.n	8005dcc <USB_EPStartXfer+0x692>
 8005d5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d68:	f003 031f 	and.w	r3, r3, #31
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d104      	bne.n	8005d7a <USB_EPStartXfer+0x640>
 8005d70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d74:	3b01      	subs	r3, #1
 8005d76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	029b      	lsls	r3, r3, #10
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	e01b      	b.n	8005dcc <USB_EPStartXfer+0x692>
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	785b      	ldrb	r3, [r3, #1]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d116      	bne.n	8005dcc <USB_EPStartXfer+0x692>
 8005d9e:	1d3b      	adds	r3, r7, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dac:	4413      	add	r3, r2
 8005dae:	647b      	str	r3, [r7, #68]	; 0x44
 8005db0:	463b      	mov	r3, r7
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	00da      	lsls	r2, r3, #3
 8005db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dba:	4413      	add	r3, r2
 8005dbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005dcc:	463b      	mov	r3, r7
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	895b      	ldrh	r3, [r3, #10]
 8005dd2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6959      	ldr	r1, [r3, #20]
 8005ddc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005de6:	1d38      	adds	r0, r7, #4
 8005de8:	6800      	ldr	r0, [r0, #0]
 8005dea:	f000 ff30 	bl	8006c4e <USB_WritePMA>
 8005dee:	e1e2      	b.n	80061b6 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005df0:	463b      	mov	r3, r7
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	463b      	mov	r3, r7
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e18:	1d3b      	adds	r3, r7, #4
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	441a      	add	r2, r3
 8005e26:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e3e:	1d3b      	adds	r3, r7, #4
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	663b      	str	r3, [r7, #96]	; 0x60
 8005e44:	1d3b      	adds	r3, r7, #4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e52:	4413      	add	r3, r2
 8005e54:	663b      	str	r3, [r7, #96]	; 0x60
 8005e56:	463b      	mov	r3, r7
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	00da      	lsls	r2, r3, #3
 8005e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e72:	463b      	mov	r3, r7
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	891b      	ldrh	r3, [r3, #8]
 8005e78:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6959      	ldr	r1, [r3, #20]
 8005e82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005e8c:	1d38      	adds	r0, r7, #4
 8005e8e:	6800      	ldr	r0, [r0, #0]
 8005e90:	f000 fedd 	bl	8006c4e <USB_WritePMA>
 8005e94:	e18f      	b.n	80061b6 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 808f 	beq.w	8005fd0 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eb2:	1d3b      	adds	r3, r7, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eb8:	463b      	mov	r3, r7
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d164      	bne.n	8005f8c <USB_EPStartXfer+0x852>
 8005ec2:	1d3b      	adds	r3, r7, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ec8:	1d3b      	adds	r3, r7, #4
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ed6:	4413      	add	r3, r2
 8005ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8005eda:	463b      	mov	r3, r7
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	00da      	lsls	r2, r3, #3
 8005ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005eea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d112      	bne.n	8005f1a <USB_EPStartXfer+0x7e0>
 8005ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	e054      	b.n	8005fc4 <USB_EPStartXfer+0x88a>
 8005f1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f20:	d817      	bhi.n	8005f52 <USB_EPStartXfer+0x818>
 8005f22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <USB_EPStartXfer+0x808>
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	029b      	lsls	r3, r3, #10
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	e038      	b.n	8005fc4 <USB_EPStartXfer+0x88a>
 8005f52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d104      	bne.n	8005f72 <USB_EPStartXfer+0x838>
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	029b      	lsls	r3, r3, #10
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	e01b      	b.n	8005fc4 <USB_EPStartXfer+0x88a>
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d116      	bne.n	8005fc4 <USB_EPStartXfer+0x88a>
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fa4:	4413      	add	r3, r2
 8005fa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fa8:	463b      	mov	r3, r7
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	00da      	lsls	r2, r3, #3
 8005fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fb8:	677b      	str	r3, [r7, #116]	; 0x74
 8005fba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	895b      	ldrh	r3, [r3, #10]
 8005fca:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005fce:	e097      	b.n	8006100 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d168      	bne.n	80060ac <USB_EPStartXfer+0x972>
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	00da      	lsls	r2, r3, #3
 8006000:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006004:	4413      	add	r3, r2
 8006006:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800600a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800600c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006010:	2b00      	cmp	r3, #0
 8006012:	d112      	bne.n	800603a <USB_EPStartXfer+0x900>
 8006014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800601e:	b29a      	uxth	r2, r3
 8006020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e05d      	b.n	80060f6 <USB_EPStartXfer+0x9bc>
 800603a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800603e:	2b3e      	cmp	r3, #62	; 0x3e
 8006040:	d817      	bhi.n	8006072 <USB_EPStartXfer+0x938>
 8006042:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800604c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d004      	beq.n	8006062 <USB_EPStartXfer+0x928>
 8006058:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800605c:	3301      	adds	r3, #1
 800605e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006062:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006066:	b29b      	uxth	r3, r3
 8006068:	029b      	lsls	r3, r3, #10
 800606a:	b29a      	uxth	r2, r3
 800606c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	e041      	b.n	80060f6 <USB_EPStartXfer+0x9bc>
 8006072:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800607c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <USB_EPStartXfer+0x958>
 8006088:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800608c:	3b01      	subs	r3, #1
 800608e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006092:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006096:	b29b      	uxth	r3, r3
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	b29b      	uxth	r3, r3
 800609c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e024      	b.n	80060f6 <USB_EPStartXfer+0x9bc>
 80060ac:	463b      	mov	r3, r7
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d11f      	bne.n	80060f6 <USB_EPStartXfer+0x9bc>
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060ce:	4413      	add	r3, r2
 80060d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060d4:	463b      	mov	r3, r7
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	00da      	lsls	r2, r3, #3
 80060dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060e0:	4413      	add	r3, r2
 80060e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060f6:	463b      	mov	r3, r7
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	891b      	ldrh	r3, [r3, #8]
 80060fc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006100:	463b      	mov	r3, r7
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6959      	ldr	r1, [r3, #20]
 8006106:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800610a:	b29b      	uxth	r3, r3
 800610c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006110:	1d38      	adds	r0, r7, #4
 8006112:	6800      	ldr	r0, [r0, #0]
 8006114:	f000 fd9b 	bl	8006c4e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006118:	463b      	mov	r3, r7
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d122      	bne.n	8006168 <USB_EPStartXfer+0xa2e>
 8006122:	1d3b      	adds	r3, r7, #4
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006140:	1d3b      	adds	r3, r7, #4
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	463b      	mov	r3, r7
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	441a      	add	r2, r3
 800614e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]
 8006166:	e026      	b.n	80061b6 <USB_EPStartXfer+0xa7c>
 8006168:	463b      	mov	r3, r7
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d121      	bne.n	80061b6 <USB_EPStartXfer+0xa7c>
 8006172:	1d3b      	adds	r3, r7, #4
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	463b      	mov	r3, r7
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006190:	1d3b      	adds	r3, r7, #4
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	463b      	mov	r3, r7
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80061b6:	1d3b      	adds	r3, r7, #4
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	463b      	mov	r3, r7
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f107 020e 	add.w	r2, r7, #14
 80061cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d4:	8013      	strh	r3, [r2, #0]
 80061d6:	f107 030e 	add.w	r3, r7, #14
 80061da:	f107 020e 	add.w	r2, r7, #14
 80061de:	8812      	ldrh	r2, [r2, #0]
 80061e0:	f082 0210 	eor.w	r2, r2, #16
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	f107 030e 	add.w	r3, r7, #14
 80061ea:	f107 020e 	add.w	r2, r7, #14
 80061ee:	8812      	ldrh	r2, [r2, #0]
 80061f0:	f082 0220 	eor.w	r2, r2, #32
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	1d3b      	adds	r3, r7, #4
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	463b      	mov	r3, r7
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	441a      	add	r2, r3
 8006204:	f107 030e 	add.w	r3, r7, #14
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]
 800621e:	e3b5      	b.n	800698c <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006220:	463b      	mov	r3, r7
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	7b1b      	ldrb	r3, [r3, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f040 8090 	bne.w	800634c <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800622c:	463b      	mov	r3, r7
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	429a      	cmp	r2, r3
 800623a:	d90e      	bls.n	800625a <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800623c:	463b      	mov	r3, r7
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006246:	463b      	mov	r3, r7
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699a      	ldr	r2, [r3, #24]
 800624c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006250:	1ad2      	subs	r2, r2, r3
 8006252:	463b      	mov	r3, r7
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	619a      	str	r2, [r3, #24]
 8006258:	e008      	b.n	800626c <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006264:	463b      	mov	r3, r7
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800626c:	1d3b      	adds	r3, r7, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006284:	4413      	add	r3, r2
 8006286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800628a:	463b      	mov	r3, r7
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	00da      	lsls	r2, r3, #3
 8006292:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006296:	4413      	add	r3, r2
 8006298:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800629c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d116      	bne.n	80062d6 <USB_EPStartXfer+0xb9c>
 80062a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062ba:	801a      	strh	r2, [r3, #0]
 80062bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	e32c      	b.n	8006930 <USB_EPStartXfer+0x11f6>
 80062d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062da:	2b3e      	cmp	r3, #62	; 0x3e
 80062dc:	d818      	bhi.n	8006310 <USB_EPStartXfer+0xbd6>
 80062de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062e2:	085b      	lsrs	r3, r3, #1
 80062e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <USB_EPStartXfer+0xbc4>
 80062f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062f8:	3301      	adds	r3, #1
 80062fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006302:	b29b      	uxth	r3, r3
 8006304:	029b      	lsls	r3, r3, #10
 8006306:	b29a      	uxth	r2, r3
 8006308:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800630c:	801a      	strh	r2, [r3, #0]
 800630e:	e30f      	b.n	8006930 <USB_EPStartXfer+0x11f6>
 8006310:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800631a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <USB_EPStartXfer+0xbf6>
 8006326:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800632a:	3b01      	subs	r3, #1
 800632c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006330:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006334:	b29b      	uxth	r3, r3
 8006336:	029b      	lsls	r3, r3, #10
 8006338:	b29b      	uxth	r3, r3
 800633a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006342:	b29a      	uxth	r2, r3
 8006344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	e2f1      	b.n	8006930 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800634c:	463b      	mov	r3, r7
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	78db      	ldrb	r3, [r3, #3]
 8006352:	2b02      	cmp	r3, #2
 8006354:	f040 818f 	bne.w	8006676 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d175      	bne.n	800644e <USB_EPStartXfer+0xd14>
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800636a:	1d3b      	adds	r3, r7, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006372:	b29b      	uxth	r3, r3
 8006374:	461a      	mov	r2, r3
 8006376:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800637a:	4413      	add	r3, r2
 800637c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	00da      	lsls	r2, r3, #3
 8006388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800638c:	4413      	add	r3, r2
 800638e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d116      	bne.n	80063ce <USB_EPStartXfer+0xc94>
 80063a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063b2:	801a      	strh	r2, [r3, #0]
 80063b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ca:	801a      	strh	r2, [r3, #0]
 80063cc:	e065      	b.n	800649a <USB_EPStartXfer+0xd60>
 80063ce:	463b      	mov	r3, r7
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b3e      	cmp	r3, #62	; 0x3e
 80063d6:	d81a      	bhi.n	800640e <USB_EPStartXfer+0xcd4>
 80063d8:	463b      	mov	r3, r7
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063e4:	463b      	mov	r3, r7
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <USB_EPStartXfer+0xcc2>
 80063f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063f6:	3301      	adds	r3, #1
 80063f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006400:	b29b      	uxth	r3, r3
 8006402:	029b      	lsls	r3, r3, #10
 8006404:	b29a      	uxth	r2, r3
 8006406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	e045      	b.n	800649a <USB_EPStartXfer+0xd60>
 800640e:	463b      	mov	r3, r7
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800641a:	463b      	mov	r3, r7
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 031f 	and.w	r3, r3, #31
 8006424:	2b00      	cmp	r3, #0
 8006426:	d104      	bne.n	8006432 <USB_EPStartXfer+0xcf8>
 8006428:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800642c:	3b01      	subs	r3, #1
 800642e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006432:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006436:	b29b      	uxth	r3, r3
 8006438:	029b      	lsls	r3, r3, #10
 800643a:	b29b      	uxth	r3, r3
 800643c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006444:	b29a      	uxth	r2, r3
 8006446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800644a:	801a      	strh	r2, [r3, #0]
 800644c:	e025      	b.n	800649a <USB_EPStartXfer+0xd60>
 800644e:	463b      	mov	r3, r7
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d120      	bne.n	800649a <USB_EPStartXfer+0xd60>
 8006458:	1d3b      	adds	r3, r7, #4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006460:	1d3b      	adds	r3, r7, #4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006468:	b29b      	uxth	r3, r3
 800646a:	461a      	mov	r2, r3
 800646c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006470:	4413      	add	r3, r2
 8006472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006476:	463b      	mov	r3, r7
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	00da      	lsls	r2, r3, #3
 800647e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006482:	4413      	add	r3, r2
 8006484:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	b29a      	uxth	r2, r3
 8006494:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006498:	801a      	strh	r2, [r3, #0]
 800649a:	1d3b      	adds	r3, r7, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064a2:	463b      	mov	r3, r7
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d175      	bne.n	8006598 <USB_EPStartXfer+0xe5e>
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064b4:	1d3b      	adds	r3, r7, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064bc:	b29b      	uxth	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064c4:	4413      	add	r3, r2
 80064c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ca:	463b      	mov	r3, r7
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	00da      	lsls	r2, r3, #3
 80064d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064e0:	463b      	mov	r3, r7
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d116      	bne.n	8006518 <USB_EPStartXfer+0xdde>
 80064ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650e:	b29a      	uxth	r2, r3
 8006510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006514:	801a      	strh	r2, [r3, #0]
 8006516:	e061      	b.n	80065dc <USB_EPStartXfer+0xea2>
 8006518:	463b      	mov	r3, r7
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b3e      	cmp	r3, #62	; 0x3e
 8006520:	d81a      	bhi.n	8006558 <USB_EPStartXfer+0xe1e>
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800652e:	463b      	mov	r3, r7
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <USB_EPStartXfer+0xe0c>
 800653c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006540:	3301      	adds	r3, #1
 8006542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654a:	b29b      	uxth	r3, r3
 800654c:	029b      	lsls	r3, r3, #10
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	e041      	b.n	80065dc <USB_EPStartXfer+0xea2>
 8006558:	463b      	mov	r3, r7
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006564:	463b      	mov	r3, r7
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <USB_EPStartXfer+0xe42>
 8006572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006576:	3b01      	subs	r3, #1
 8006578:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006580:	b29b      	uxth	r3, r3
 8006582:	029b      	lsls	r3, r3, #10
 8006584:	b29b      	uxth	r3, r3
 8006586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800658e:	b29a      	uxth	r2, r3
 8006590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006594:	801a      	strh	r2, [r3, #0]
 8006596:	e021      	b.n	80065dc <USB_EPStartXfer+0xea2>
 8006598:	463b      	mov	r3, r7
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d11c      	bne.n	80065dc <USB_EPStartXfer+0xea2>
 80065a2:	1d3b      	adds	r3, r7, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065b2:	4413      	add	r3, r2
 80065b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065b8:	463b      	mov	r3, r7
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	00da      	lsls	r2, r3, #3
 80065c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80065ce:	463b      	mov	r3, r7
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065da:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80065dc:	463b      	mov	r3, r7
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 81a4 	beq.w	8006930 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	463b      	mov	r3, r7
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <USB_EPStartXfer+0xeda>
 8006608:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800660c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10d      	bne.n	8006630 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006614:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800661c:	2b00      	cmp	r3, #0
 800661e:	f040 8187 	bne.w	8006930 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006622:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	f040 8180 	bne.w	8006930 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006630:	1d3b      	adds	r3, r7, #4
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	463b      	mov	r3, r7
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800664e:	1d3b      	adds	r3, r7, #4
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	441a      	add	r2, r3
 800665c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006670:	b29b      	uxth	r3, r3
 8006672:	8013      	strh	r3, [r2, #0]
 8006674:	e15c      	b.n	8006930 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006676:	463b      	mov	r3, r7
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	78db      	ldrb	r3, [r3, #3]
 800667c:	2b01      	cmp	r3, #1
 800667e:	f040 8155 	bne.w	800692c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8006682:	463b      	mov	r3, r7
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699a      	ldr	r2, [r3, #24]
 8006688:	463b      	mov	r3, r7
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	429a      	cmp	r2, r3
 8006690:	d90e      	bls.n	80066b0 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8006692:	463b      	mov	r3, r7
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800669c:	463b      	mov	r3, r7
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a6:	1ad2      	subs	r2, r2, r3
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	619a      	str	r2, [r3, #24]
 80066ae:	e008      	b.n	80066c2 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80066b0:	463b      	mov	r3, r7
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2200      	movs	r2, #0
 80066c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066c2:	463b      	mov	r3, r7
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d16f      	bne.n	80067ac <USB_EPStartXfer+0x1072>
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066d4:	1d3b      	adds	r3, r7, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066dc:	b29b      	uxth	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066e4:	4413      	add	r3, r2
 80066e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066ea:	463b      	mov	r3, r7
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	00da      	lsls	r2, r3, #3
 80066f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066f6:	4413      	add	r3, r2
 80066f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006700:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006704:	2b00      	cmp	r3, #0
 8006706:	d116      	bne.n	8006736 <USB_EPStartXfer+0xffc>
 8006708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006714:	b29a      	uxth	r2, r3
 8006716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672c:	b29a      	uxth	r2, r3
 800672e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	e05f      	b.n	80067f6 <USB_EPStartXfer+0x10bc>
 8006736:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800673a:	2b3e      	cmp	r3, #62	; 0x3e
 800673c:	d818      	bhi.n	8006770 <USB_EPStartXfer+0x1036>
 800673e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006748:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <USB_EPStartXfer+0x1024>
 8006754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006758:	3301      	adds	r3, #1
 800675a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800675e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006762:	b29b      	uxth	r3, r3
 8006764:	029b      	lsls	r3, r3, #10
 8006766:	b29a      	uxth	r2, r3
 8006768:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800676c:	801a      	strh	r2, [r3, #0]
 800676e:	e042      	b.n	80067f6 <USB_EPStartXfer+0x10bc>
 8006770:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800677a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <USB_EPStartXfer+0x1056>
 8006786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678a:	3b01      	subs	r3, #1
 800678c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006794:	b29b      	uxth	r3, r3
 8006796:	029b      	lsls	r3, r3, #10
 8006798:	b29b      	uxth	r3, r3
 800679a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	e024      	b.n	80067f6 <USB_EPStartXfer+0x10bc>
 80067ac:	463b      	mov	r3, r7
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d11f      	bne.n	80067f6 <USB_EPStartXfer+0x10bc>
 80067b6:	1d3b      	adds	r3, r7, #4
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067be:	1d3b      	adds	r3, r7, #4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067ce:	4413      	add	r3, r2
 80067d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067d4:	463b      	mov	r3, r7
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	00da      	lsls	r2, r3, #3
 80067dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067e0:	4413      	add	r3, r2
 80067e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80067ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	1d3b      	adds	r3, r7, #4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067fe:	463b      	mov	r3, r7
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	785b      	ldrb	r3, [r3, #1]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d16f      	bne.n	80068e8 <USB_EPStartXfer+0x11ae>
 8006808:	1d3b      	adds	r3, r7, #4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006810:	1d3b      	adds	r3, r7, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006818:	b29b      	uxth	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006820:	4413      	add	r3, r2
 8006822:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006826:	463b      	mov	r3, r7
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	00da      	lsls	r2, r3, #3
 800682e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006832:	4413      	add	r3, r2
 8006834:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006838:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800683c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006840:	2b00      	cmp	r3, #0
 8006842:	d116      	bne.n	8006872 <USB_EPStartXfer+0x1138>
 8006844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006850:	b29a      	uxth	r2, r3
 8006852:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006856:	801a      	strh	r2, [r3, #0]
 8006858:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006868:	b29a      	uxth	r2, r3
 800686a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	e05e      	b.n	8006930 <USB_EPStartXfer+0x11f6>
 8006872:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006876:	2b3e      	cmp	r3, #62	; 0x3e
 8006878:	d818      	bhi.n	80068ac <USB_EPStartXfer+0x1172>
 800687a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006884:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d004      	beq.n	800689a <USB_EPStartXfer+0x1160>
 8006890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006894:	3301      	adds	r3, #1
 8006896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800689a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800689e:	b29b      	uxth	r3, r3
 80068a0:	029b      	lsls	r3, r3, #10
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	e041      	b.n	8006930 <USB_EPStartXfer+0x11f6>
 80068ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <USB_EPStartXfer+0x1192>
 80068c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c6:	3b01      	subs	r3, #1
 80068c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	029b      	lsls	r3, r3, #10
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	e023      	b.n	8006930 <USB_EPStartXfer+0x11f6>
 80068e8:	463b      	mov	r3, r7
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d11e      	bne.n	8006930 <USB_EPStartXfer+0x11f6>
 80068f2:	1d3b      	adds	r3, r7, #4
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006902:	4413      	add	r3, r2
 8006904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006908:	463b      	mov	r3, r7
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	00da      	lsls	r2, r3, #3
 8006910:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006914:	4413      	add	r3, r2
 8006916:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800691a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800691e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006922:	b29a      	uxth	r2, r3
 8006924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006928:	801a      	strh	r2, [r3, #0]
 800692a:	e001      	b.n	8006930 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e02e      	b.n	800698e <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	463b      	mov	r3, r7
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800694e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006952:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006956:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800695a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800695e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006962:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006966:	1d3b      	adds	r3, r7, #4
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	463b      	mov	r3, r7
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	441a      	add	r2, r3
 8006974:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006988:	b29b      	uxth	r3, r3
 800698a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d020      	beq.n	80069ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c0:	81bb      	strh	r3, [r7, #12]
 80069c2:	89bb      	ldrh	r3, [r7, #12]
 80069c4:	f083 0310 	eor.w	r3, r3, #16
 80069c8:	81bb      	strh	r3, [r7, #12]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	441a      	add	r2, r3
 80069d4:	89bb      	ldrh	r3, [r7, #12]
 80069d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	8013      	strh	r3, [r2, #0]
 80069ea:	e01f      	b.n	8006a2c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	81fb      	strh	r3, [r7, #14]
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a0a:	81fb      	strh	r3, [r7, #14]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	441a      	add	r2, r3
 8006a16:	89fb      	ldrh	r3, [r7, #14]
 8006a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b087      	sub	sp, #28
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	7b1b      	ldrb	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f040 809d 	bne.w	8006b88 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d04c      	beq.n	8006af0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	823b      	strh	r3, [r7, #16]
 8006a64:	8a3b      	ldrh	r3, [r7, #16]
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d01b      	beq.n	8006aa6 <USB_EPClearStall+0x6c>
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a84:	81fb      	strh	r3, [r7, #14]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	441a      	add	r2, r3
 8006a90:	89fb      	ldrh	r3, [r7, #14]
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	78db      	ldrb	r3, [r3, #3]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d06c      	beq.n	8006b88 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac4:	81bb      	strh	r3, [r7, #12]
 8006ac6:	89bb      	ldrh	r3, [r7, #12]
 8006ac8:	f083 0320 	eor.w	r3, r3, #32
 8006acc:	81bb      	strh	r3, [r7, #12]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	441a      	add	r2, r3
 8006ad8:	89bb      	ldrh	r3, [r7, #12]
 8006ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	8013      	strh	r3, [r2, #0]
 8006aee:	e04b      	b.n	8006b88 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	82fb      	strh	r3, [r7, #22]
 8006afe:	8afb      	ldrh	r3, [r7, #22]
 8006b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01b      	beq.n	8006b40 <USB_EPClearStall+0x106>
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1e:	82bb      	strh	r3, [r7, #20]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	8abb      	ldrh	r3, [r7, #20]
 8006b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b56:	827b      	strh	r3, [r7, #18]
 8006b58:	8a7b      	ldrh	r3, [r7, #18]
 8006b5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b5e:	827b      	strh	r3, [r7, #18]
 8006b60:	8a7b      	ldrh	r3, [r7, #18]
 8006b62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b66:	827b      	strh	r3, [r7, #18]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	441a      	add	r2, r3
 8006b72:	8a7b      	ldrh	r3, [r7, #18]
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d103      	bne.n	8006bb0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2280      	movs	r2, #128	; 0x80
 8006bac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c28:	68fb      	ldr	r3, [r7, #12]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b08d      	sub	sp, #52	; 0x34
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	4611      	mov	r1, r2
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	80fb      	strh	r3, [r7, #6]
 8006c60:	4613      	mov	r3, r2
 8006c62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c64:	88bb      	ldrh	r3, [r7, #4]
 8006c66:	3301      	adds	r3, #1
 8006c68:	085b      	lsrs	r3, r3, #1
 8006c6a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c74:	88fa      	ldrh	r2, [r7, #6]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c84:	e01b      	b.n	8006cbe <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	3301      	adds	r3, #1
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	3302      	adds	r3, #2
 8006cb0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e0      	bne.n	8006c86 <USB_WritePMA+0x38>
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	3734      	adds	r7, #52	; 0x34
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b08b      	sub	sp, #44	; 0x2c
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	460b      	mov	r3, r1
 8006ce0:	80fb      	strh	r3, [r7, #6]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006ce6:	88bb      	ldrh	r3, [r7, #4]
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d00:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
 8006d06:	e018      	b.n	8006d3a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	3302      	adds	r3, #2
 8006d14:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	3301      	adds	r3, #1
 8006d22:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	3301      	adds	r3, #1
 8006d32:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	3b01      	subs	r3, #1
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e3      	bne.n	8006d08 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006d40:	88bb      	ldrh	r3, [r7, #4]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	701a      	strb	r2, [r3, #0]
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	372c      	adds	r7, #44	; 0x2c
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d78:	f002 f998 	bl	80090ac <malloc>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e066      	b.n	8006e60 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	7c1b      	ldrb	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d119      	bne.n	8006dd6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da6:	2202      	movs	r2, #2
 8006da8:	2181      	movs	r1, #129	; 0x81
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 ff50 	bl	8008c50 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dba:	2202      	movs	r2, #2
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 ff46 	bl	8008c50 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2210      	movs	r2, #16
 8006dd0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006dd4:	e016      	b.n	8006e04 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dd6:	2340      	movs	r3, #64	; 0x40
 8006dd8:	2202      	movs	r2, #2
 8006dda:	2181      	movs	r1, #129	; 0x81
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 ff37 	bl	8008c50 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006de8:	2340      	movs	r3, #64	; 0x40
 8006dea:	2202      	movs	r2, #2
 8006dec:	2101      	movs	r1, #1
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 ff2e 	bl	8008c50 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2210      	movs	r2, #16
 8006e00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e04:	2308      	movs	r3, #8
 8006e06:	2203      	movs	r2, #3
 8006e08:	2182      	movs	r1, #130	; 0x82
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 ff20 	bl	8008c50 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7c1b      	ldrb	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e44:	2101      	movs	r1, #1
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f002 f87e 	bl	8008f48 <USBD_LL_PrepareReceive>
 8006e4c:	e007      	b.n	8006e5e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e54:	2340      	movs	r3, #64	; 0x40
 8006e56:	2101      	movs	r1, #1
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f002 f875 	bl	8008f48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e74:	2181      	movs	r1, #129	; 0x81
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 ff28 	bl	8008ccc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e82:	2101      	movs	r1, #1
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 ff21 	bl	8008ccc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e92:	2182      	movs	r1, #130	; 0x82
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 ff19 	bl	8008ccc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00e      	beq.n	8006ed2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f002 f8f9 	bl	80090bc <free>
    pdev->pClassData = NULL;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d03a      	beq.n	8006f7c <USBD_CDC_Setup+0xa0>
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	f040 8097 	bne.w	800703a <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	88db      	ldrh	r3, [r3, #6]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d029      	beq.n	8006f68 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	b25b      	sxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	da11      	bge.n	8006f42 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006f2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	88d2      	ldrh	r2, [r2, #6]
 8006f30:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f32:	6939      	ldr	r1, [r7, #16]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	88db      	ldrh	r3, [r3, #6]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 fa8d 	bl	800845a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006f40:	e082      	b.n	8007048 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	785a      	ldrb	r2, [r3, #1]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	88db      	ldrh	r3, [r3, #6]
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f58:	6939      	ldr	r1, [r7, #16]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	88db      	ldrh	r3, [r3, #6]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 faa6 	bl	80084b2 <USBD_CtlPrepareRx>
      break;
 8006f66:	e06f      	b.n	8007048 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	7850      	ldrb	r0, [r2, #1]
 8006f74:	2200      	movs	r2, #0
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	4798      	blx	r3
      break;
 8006f7a:	e065      	b.n	8007048 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b0b      	cmp	r3, #11
 8006f82:	d84f      	bhi.n	8007024 <USBD_CDC_Setup+0x148>
 8006f84:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <USBD_CDC_Setup+0xb0>)
 8006f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8a:	bf00      	nop
 8006f8c:	08006fbd 	.word	0x08006fbd
 8006f90:	08007033 	.word	0x08007033
 8006f94:	08007025 	.word	0x08007025
 8006f98:	08007025 	.word	0x08007025
 8006f9c:	08007025 	.word	0x08007025
 8006fa0:	08007025 	.word	0x08007025
 8006fa4:	08007025 	.word	0x08007025
 8006fa8:	08007025 	.word	0x08007025
 8006fac:	08007025 	.word	0x08007025
 8006fb0:	08007025 	.word	0x08007025
 8006fb4:	08006fe5 	.word	0x08006fe5
 8006fb8:	0800700d 	.word	0x0800700d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d107      	bne.n	8006fd6 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fc6:	f107 030c 	add.w	r3, r7, #12
 8006fca:	2202      	movs	r2, #2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f001 fa43 	bl	800845a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fd4:	e030      	b.n	8007038 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 f9cd 	bl	8008378 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe2:	e029      	b.n	8007038 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d107      	bne.n	8006ffe <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fee:	f107 030f 	add.w	r3, r7, #15
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 fa2f 	bl	800845a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ffc:	e01c      	b.n	8007038 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 f9b9 	bl	8008378 <USBD_CtlError>
            ret = USBD_FAIL;
 8007006:	2303      	movs	r3, #3
 8007008:	75fb      	strb	r3, [r7, #23]
          break;
 800700a:	e015      	b.n	8007038 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007012:	2b03      	cmp	r3, #3
 8007014:	d00f      	beq.n	8007036 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 f9ad 	bl	8008378 <USBD_CtlError>
            ret = USBD_FAIL;
 800701e:	2303      	movs	r3, #3
 8007020:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007022:	e008      	b.n	8007036 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 f9a6 	bl	8008378 <USBD_CtlError>
          ret = USBD_FAIL;
 800702c:	2303      	movs	r3, #3
 800702e:	75fb      	strb	r3, [r7, #23]
          break;
 8007030:	e002      	b.n	8007038 <USBD_CDC_Setup+0x15c>
          break;
 8007032:	bf00      	nop
 8007034:	e008      	b.n	8007048 <USBD_CDC_Setup+0x16c>
          break;
 8007036:	bf00      	nop
      }
      break;
 8007038:	e006      	b.n	8007048 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f99b 	bl	8008378 <USBD_CtlError>
      ret = USBD_FAIL;
 8007042:	2303      	movs	r3, #3
 8007044:	75fb      	strb	r3, [r7, #23]
      break;
 8007046:	bf00      	nop
  }

  return (uint8_t)ret;
 8007048:	7dfb      	ldrb	r3, [r7, #23]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop

08007054 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007066:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007072:	2303      	movs	r3, #3
 8007074:	e04f      	b.n	8007116 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800707c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800707e:	78fa      	ldrb	r2, [r7, #3]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	3318      	adds	r3, #24
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d029      	beq.n	80070e8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	3318      	adds	r3, #24
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	78f9      	ldrb	r1, [r7, #3]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	460b      	mov	r3, r1
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	4403      	add	r3, r0
 80070b4:	3338      	adds	r3, #56	; 0x38
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80070bc:	fb03 f301 	mul.w	r3, r3, r1
 80070c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d110      	bne.n	80070e8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80070c6:	78fa      	ldrb	r2, [r7, #3]
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	4613      	mov	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	440b      	add	r3, r1
 80070d4:	3318      	adds	r3, #24
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070da:	78f9      	ldrb	r1, [r7, #3]
 80070dc:	2300      	movs	r3, #0
 80070de:	2200      	movs	r2, #0
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fef9 	bl	8008ed8 <USBD_LL_Transmit>
 80070e6:	e015      	b.n	8007114 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	460b      	mov	r3, r1
 8007128:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007130:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	e015      	b.n	800716c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 ff37 	bl	8008fb8 <USBD_LL_GetRxDataSize>
 800714a:	4602      	mov	r2, r0
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007166:	4611      	mov	r1, r2
 8007168:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007182:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d015      	beq.n	80071ba <USBD_CDC_EP0_RxReady+0x46>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007194:	2bff      	cmp	r3, #255	; 0xff
 8007196:	d010      	beq.n	80071ba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80071a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071ae:	b292      	uxth	r2, r2
 80071b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	22ff      	movs	r2, #255	; 0xff
 80071b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2243      	movs	r2, #67	; 0x43
 80071d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80071d2:	4b03      	ldr	r3, [pc, #12]	; (80071e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	20000094 	.word	0x20000094

080071e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2243      	movs	r2, #67	; 0x43
 80071f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80071f2:	4b03      	ldr	r3, [pc, #12]	; (8007200 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	20000050 	.word	0x20000050

08007204 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2243      	movs	r2, #67	; 0x43
 8007210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007212:	4b03      	ldr	r3, [pc, #12]	; (8007220 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	200000d8 	.word	0x200000d8

08007224 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	220a      	movs	r2, #10
 8007230:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007232:	4b03      	ldr	r3, [pc, #12]	; (8007240 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	2000000c 	.word	0x2000000c

08007244 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007254:	2303      	movs	r3, #3
 8007256:	e004      	b.n	8007262 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800726e:	b480      	push	{r7}
 8007270:	b087      	sub	sp, #28
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007280:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	371c      	adds	r7, #28
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072b0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e01a      	b.n	8007320 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d114      	bne.n	800731e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007312:	2181      	movs	r1, #129	; 0x81
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 fddf 	bl	8008ed8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007336:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007342:	2303      	movs	r3, #3
 8007344:	e016      	b.n	8007374 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7c1b      	ldrb	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007358:	2101      	movs	r1, #1
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 fdf4 	bl	8008f48 <USBD_LL_PrepareReceive>
 8007360:	e007      	b.n	8007372 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007368:	2340      	movs	r3, #64	; 0x40
 800736a:	2101      	movs	r1, #1
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 fdeb 	bl	8008f48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007390:	2303      	movs	r3, #3
 8007392:	e01f      	b.n	80073d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	79fa      	ldrb	r2, [r7, #7]
 80073c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f001 fbad 	bl	8008b28 <USBD_LL_Init>
 80073ce:	4603      	mov	r3, r0
 80073d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e016      	b.n	8007422 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	f107 020e 	add.w	r2, r7, #14
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	4602      	mov	r2, r0
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 fbda 	bl	8008bec <USBD_LL_Start>
 8007438:	4603      	mov	r3, r0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007464:	2303      	movs	r3, #3
 8007466:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	78fa      	ldrb	r2, [r7, #3]
 800747c:	4611      	mov	r1, r2
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	78fa      	ldrb	r2, [r7, #3]
 80074b0:	4611      	mov	r1, r2
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
  }

  return USBD_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 ff16 	bl	8008304 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074f4:	f003 031f 	and.w	r3, r3, #31
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d00e      	beq.n	800751a <USBD_LL_SetupStage+0x5a>
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d302      	bcc.n	8007506 <USBD_LL_SetupStage+0x46>
 8007500:	2b02      	cmp	r3, #2
 8007502:	d014      	beq.n	800752e <USBD_LL_SetupStage+0x6e>
 8007504:	e01d      	b.n	8007542 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f9d6 	bl	80078c0 <USBD_StdDevReq>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
      break;
 8007518:	e020      	b.n	800755c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa3a 	bl	800799c <USBD_StdItfReq>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]
      break;
 800752c:	e016      	b.n	800755c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa76 	bl	8007a28 <USBD_StdEPReq>
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
      break;
 8007540:	e00c      	b.n	800755c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800754c:	b2db      	uxtb	r3, r3
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fbf1 	bl	8008d38 <USBD_LL_StallEP>
 8007556:	4603      	mov	r3, r0
 8007558:	73fb      	strb	r3, [r7, #15]
      break;
 800755a:	bf00      	nop
  }

  return ret;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	460b      	mov	r3, r1
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d137      	bne.n	80075ea <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007580:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007588:	2b03      	cmp	r3, #3
 800758a:	d14a      	bne.n	8007622 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	429a      	cmp	r2, r3
 8007596:	d913      	bls.n	80075c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	1ad2      	subs	r2, r2, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	4293      	cmp	r3, r2
 80075b0:	bf28      	it	cs
 80075b2:	4613      	movcs	r3, r2
 80075b4:	461a      	mov	r2, r3
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 ff97 	bl	80084ec <USBD_CtlContinueRx>
 80075be:	e030      	b.n	8007622 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d105      	bne.n	80075e2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 ff93 	bl	800850e <USBD_CtlSendStatus>
 80075e8:	e01b      	b.n	8007622 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d013      	beq.n	800761e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d10e      	bne.n	800761e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	7afa      	ldrb	r2, [r7, #11]
 800760a:	4611      	mov	r1, r2
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	4798      	blx	r3
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	e002      	b.n	8007624 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800761e:	2303      	movs	r3, #3
 8007620:	e000      	b.n	8007624 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	460b      	mov	r3, r1
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800763a:	7afb      	ldrb	r3, [r7, #11]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d16a      	bne.n	8007716 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3314      	adds	r3, #20
 8007644:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800764c:	2b02      	cmp	r3, #2
 800764e:	d155      	bne.n	80076fc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	429a      	cmp	r2, r3
 800765a:	d914      	bls.n	8007686 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	1ad2      	subs	r2, r2, r3
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	461a      	mov	r2, r3
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 ff0c 	bl	8008490 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007678:	2300      	movs	r3, #0
 800767a:	2200      	movs	r2, #0
 800767c:	2100      	movs	r1, #0
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f001 fc62 	bl	8008f48 <USBD_LL_PrepareReceive>
 8007684:	e03a      	b.n	80076fc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	429a      	cmp	r2, r3
 8007690:	d11c      	bne.n	80076cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800769a:	429a      	cmp	r2, r3
 800769c:	d316      	bcc.n	80076cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d20f      	bcs.n	80076cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076ac:	2200      	movs	r2, #0
 80076ae:	2100      	movs	r1, #0
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 feed 	bl	8008490 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076be:	2300      	movs	r3, #0
 80076c0:	2200      	movs	r2, #0
 80076c2:	2100      	movs	r1, #0
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f001 fc3f 	bl	8008f48 <USBD_LL_PrepareReceive>
 80076ca:	e017      	b.n	80076fc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d105      	bne.n	80076ee <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ee:	2180      	movs	r1, #128	; 0x80
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f001 fb21 	bl	8008d38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 ff1c 	bl	8008534 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007702:	2b01      	cmp	r3, #1
 8007704:	d123      	bne.n	800774e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff fe9b 	bl	8007442 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007714:	e01b      	b.n	800774e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d013      	beq.n	800774a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007728:	2b03      	cmp	r3, #3
 800772a:	d10e      	bne.n	800774a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	7afa      	ldrb	r2, [r7, #11]
 8007736:	4611      	mov	r1, r2
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	4798      	blx	r3
 800773c:	4603      	mov	r3, r0
 800773e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	e002      	b.n	8007750 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800774a:	2303      	movs	r3, #3
 800774c:	e000      	b.n	8007750 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007784:	2b00      	cmp	r3, #0
 8007786:	d009      	beq.n	800779c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6852      	ldr	r2, [r2, #4]
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	4611      	mov	r1, r2
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800779c:	2340      	movs	r3, #64	; 0x40
 800779e:	2200      	movs	r2, #0
 80077a0:	2100      	movs	r1, #0
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 fa54 	bl	8008c50 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2240      	movs	r2, #64	; 0x40
 80077b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077b8:	2340      	movs	r3, #64	; 0x40
 80077ba:	2200      	movs	r2, #0
 80077bc:	2180      	movs	r1, #128	; 0x80
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f001 fa46 	bl	8008c50 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2240      	movs	r2, #64	; 0x40
 80077ce:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	460b      	mov	r3, r1
 80077e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	78fa      	ldrb	r2, [r7, #3]
 80077ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2204      	movs	r2, #4
 8007812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007832:	2b04      	cmp	r3, #4
 8007834:	d105      	bne.n	8007842 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785e:	2b03      	cmp	r3, #3
 8007860:	d10b      	bne.n	800787a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	3301      	adds	r3, #1
 800789a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80078a2:	8a3b      	ldrh	r3, [r7, #16]
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	b21a      	sxth	r2, r3
 80078a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	b21b      	sxth	r3, r3
 80078b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80078b2:	89fb      	ldrh	r3, [r7, #14]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d004      	beq.n	80078e4 <USBD_StdDevReq+0x24>
 80078da:	2b40      	cmp	r3, #64	; 0x40
 80078dc:	d002      	beq.n	80078e4 <USBD_StdDevReq+0x24>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <USBD_StdDevReq+0x38>
 80078e2:	e050      	b.n	8007986 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	73fb      	strb	r3, [r7, #15]
    break;
 80078f6:	e04b      	b.n	8007990 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	2b09      	cmp	r3, #9
 80078fe:	d83c      	bhi.n	800797a <USBD_StdDevReq+0xba>
 8007900:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <USBD_StdDevReq+0x48>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	0800795d 	.word	0x0800795d
 800790c:	08007971 	.word	0x08007971
 8007910:	0800797b 	.word	0x0800797b
 8007914:	08007967 	.word	0x08007967
 8007918:	0800797b 	.word	0x0800797b
 800791c:	0800793b 	.word	0x0800793b
 8007920:	08007931 	.word	0x08007931
 8007924:	0800797b 	.word	0x0800797b
 8007928:	08007953 	.word	0x08007953
 800792c:	08007945 	.word	0x08007945
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f9d0 	bl	8007cd8 <USBD_GetDescriptor>
      break;
 8007938:	e024      	b.n	8007984 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fb5f 	bl	8008000 <USBD_SetAddress>
      break;
 8007942:	e01f      	b.n	8007984 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fb9c 	bl	8008084 <USBD_SetConfig>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
      break;
 8007950:	e018      	b.n	8007984 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fc39 	bl	80081cc <USBD_GetConfig>
      break;
 800795a:	e013      	b.n	8007984 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fc68 	bl	8008234 <USBD_GetStatus>
      break;
 8007964:	e00e      	b.n	8007984 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fc96 	bl	800829a <USBD_SetFeature>
      break;
 800796e:	e009      	b.n	8007984 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fca5 	bl	80082c2 <USBD_ClrFeature>
      break;
 8007978:	e004      	b.n	8007984 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fcfb 	bl	8008378 <USBD_CtlError>
      break;
 8007982:	bf00      	nop
    }
    break;
 8007984:	e004      	b.n	8007990 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fcf5 	bl	8008378 <USBD_CtlError>
    break;
 800798e:	bf00      	nop
  }

  return ret;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop

0800799c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079b2:	2b20      	cmp	r3, #32
 80079b4:	d003      	beq.n	80079be <USBD_StdItfReq+0x22>
 80079b6:	2b40      	cmp	r3, #64	; 0x40
 80079b8:	d001      	beq.n	80079be <USBD_StdItfReq+0x22>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d12a      	bne.n	8007a14 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	3b01      	subs	r3, #1
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d81d      	bhi.n	8007a06 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	889b      	ldrh	r3, [r3, #4]
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d813      	bhi.n	80079fc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	88db      	ldrh	r3, [r3, #6]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d110      	bne.n	8007a10 <USBD_StdItfReq+0x74>
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10d      	bne.n	8007a10 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fd8a 	bl	800850e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80079fa:	e009      	b.n	8007a10 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fcba 	bl	8008378 <USBD_CtlError>
      break;
 8007a04:	e004      	b.n	8007a10 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fcb5 	bl	8008378 <USBD_CtlError>
      break;
 8007a0e:	e000      	b.n	8007a12 <USBD_StdItfReq+0x76>
      break;
 8007a10:	bf00      	nop
    }
    break;
 8007a12:	e004      	b.n	8007a1e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fcae 	bl	8008378 <USBD_CtlError>
    break;
 8007a1c:	bf00      	nop
  }

  return ret;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	889b      	ldrh	r3, [r3, #4]
 8007a3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d004      	beq.n	8007a52 <USBD_StdEPReq+0x2a>
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	d002      	beq.n	8007a52 <USBD_StdEPReq+0x2a>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <USBD_StdEPReq+0x3e>
 8007a50:	e137      	b.n	8007cc2 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
 8007a60:	4603      	mov	r3, r0
 8007a62:	73fb      	strb	r3, [r7, #15]
    break;
 8007a64:	e132      	b.n	8007ccc <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d03e      	beq.n	8007aec <USBD_StdEPReq+0xc4>
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d002      	beq.n	8007a78 <USBD_StdEPReq+0x50>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d079      	beq.n	8007b6a <USBD_StdEPReq+0x142>
 8007a76:	e11e      	b.n	8007cb6 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d002      	beq.n	8007a88 <USBD_StdEPReq+0x60>
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d015      	beq.n	8007ab2 <USBD_StdEPReq+0x8a>
 8007a86:	e02b      	b.n	8007ae0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00c      	beq.n	8007aa8 <USBD_StdEPReq+0x80>
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b80      	cmp	r3, #128	; 0x80
 8007a92:	d009      	beq.n	8007aa8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f94d 	bl	8008d38 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a9e:	2180      	movs	r1, #128	; 0x80
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 f949 	bl	8008d38 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007aa6:	e020      	b.n	8007aea <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fc64 	bl	8008378 <USBD_CtlError>
        break;
 8007ab0:	e01b      	b.n	8007aea <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	885b      	ldrh	r3, [r3, #2]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10e      	bne.n	8007ad8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <USBD_StdEPReq+0xb0>
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b80      	cmp	r3, #128	; 0x80
 8007ac4:	d008      	beq.n	8007ad8 <USBD_StdEPReq+0xb0>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	88db      	ldrh	r3, [r3, #6]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d104      	bne.n	8007ad8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 f930 	bl	8008d38 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fd18 	bl	800850e <USBD_CtlSendStatus>

        break;
 8007ade:	e004      	b.n	8007aea <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fc48 	bl	8008378 <USBD_CtlError>
        break;
 8007ae8:	bf00      	nop
      }
      break;
 8007aea:	e0e9      	b.n	8007cc0 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d002      	beq.n	8007afc <USBD_StdEPReq+0xd4>
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d015      	beq.n	8007b26 <USBD_StdEPReq+0xfe>
 8007afa:	e02f      	b.n	8007b5c <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00c      	beq.n	8007b1c <USBD_StdEPReq+0xf4>
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b80      	cmp	r3, #128	; 0x80
 8007b06:	d009      	beq.n	8007b1c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 f913 	bl	8008d38 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b12:	2180      	movs	r1, #128	; 0x80
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 f90f 	bl	8008d38 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007b1a:	e025      	b.n	8007b68 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fc2a 	bl	8008378 <USBD_CtlError>
        break;
 8007b24:	e020      	b.n	8007b68 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	885b      	ldrh	r3, [r3, #2]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d11b      	bne.n	8007b66 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f931 	bl	8008da4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fce3 	bl	800850e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b5a:	e004      	b.n	8007b66 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fc0a 	bl	8008378 <USBD_CtlError>
        break;
 8007b64:	e000      	b.n	8007b68 <USBD_StdEPReq+0x140>
        break;
 8007b66:	bf00      	nop
      }
      break;
 8007b68:	e0aa      	b.n	8007cc0 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d002      	beq.n	8007b7a <USBD_StdEPReq+0x152>
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d032      	beq.n	8007bde <USBD_StdEPReq+0x1b6>
 8007b78:	e097      	b.n	8007caa <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <USBD_StdEPReq+0x168>
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b80      	cmp	r3, #128	; 0x80
 8007b84:	d004      	beq.n	8007b90 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fbf5 	bl	8008378 <USBD_CtlError>
          break;
 8007b8e:	e091      	b.n	8007cb4 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da0b      	bge.n	8007bb0 <USBD_StdEPReq+0x188>
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	3310      	adds	r3, #16
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	4413      	add	r3, r2
 8007bac:	3304      	adds	r3, #4
 8007bae:	e00b      	b.n	8007bc8 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fc3f 	bl	800845a <USBD_CtlSendData>
        break;
 8007bdc:	e06a      	b.n	8007cb4 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007bde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	da11      	bge.n	8007c0a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
 8007be8:	f003 020f 	and.w	r2, r3, #15
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3324      	adds	r3, #36	; 0x24
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d117      	bne.n	8007c30 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fbb8 	bl	8008378 <USBD_CtlError>
            break;
 8007c08:	e054      	b.n	8007cb4 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fba5 	bl	8008378 <USBD_CtlError>
            break;
 8007c2e:	e041      	b.n	8007cb4 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	da0b      	bge.n	8007c50 <USBD_StdEPReq+0x228>
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	3310      	adds	r3, #16
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	e00b      	b.n	8007c68 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c56:	4613      	mov	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	4413      	add	r3, r2
 8007c66:	3304      	adds	r3, #4
 8007c68:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <USBD_StdEPReq+0x24e>
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	d103      	bne.n	8007c7e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	e00e      	b.n	8007c9c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 f8c4 	bl	8008e10 <USBD_LL_IsStallEP>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	e002      	b.n	8007c9c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fbd9 	bl	800845a <USBD_CtlSendData>
          break;
 8007ca8:	e004      	b.n	8007cb4 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fb63 	bl	8008378 <USBD_CtlError>
        break;
 8007cb2:	bf00      	nop
      }
      break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fb5d 	bl	8008378 <USBD_CtlError>
      break;
 8007cbe:	bf00      	nop
    }
    break;
 8007cc0:	e004      	b.n	8007ccc <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fb57 	bl	8008378 <USBD_CtlError>
    break;
 8007cca:	bf00      	nop
  }

  return ret;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	885b      	ldrh	r3, [r3, #2]
 8007cf2:	0a1b      	lsrs	r3, r3, #8
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	2b0e      	cmp	r3, #14
 8007cfa:	f200 8152 	bhi.w	8007fa2 <USBD_GetDescriptor+0x2ca>
 8007cfe:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <USBD_GetDescriptor+0x2c>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007d75 	.word	0x08007d75
 8007d08:	08007d8d 	.word	0x08007d8d
 8007d0c:	08007dcd 	.word	0x08007dcd
 8007d10:	08007fa3 	.word	0x08007fa3
 8007d14:	08007fa3 	.word	0x08007fa3
 8007d18:	08007f43 	.word	0x08007f43
 8007d1c:	08007f6f 	.word	0x08007f6f
 8007d20:	08007fa3 	.word	0x08007fa3
 8007d24:	08007fa3 	.word	0x08007fa3
 8007d28:	08007fa3 	.word	0x08007fa3
 8007d2c:	08007fa3 	.word	0x08007fa3
 8007d30:	08007fa3 	.word	0x08007fa3
 8007d34:	08007fa3 	.word	0x08007fa3
 8007d38:	08007fa3 	.word	0x08007fa3
 8007d3c:	08007d41 	.word	0x08007d41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	7c12      	ldrb	r2, [r2, #16]
 8007d58:	f107 0108 	add.w	r1, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d62:	e126      	b.n	8007fb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fb06 	bl	8008378 <USBD_CtlError>
      err++;
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	72fb      	strb	r3, [r7, #11]
    break;
 8007d72:	e11e      	b.n	8007fb2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	7c12      	ldrb	r2, [r2, #16]
 8007d80:	f107 0108 	add.w	r1, r7, #8
 8007d84:	4610      	mov	r0, r2
 8007d86:	4798      	blx	r3
 8007d88:	60f8      	str	r0, [r7, #12]
    break;
 8007d8a:	e112      	b.n	8007fb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	7c1b      	ldrb	r3, [r3, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10d      	bne.n	8007db0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9c:	f107 0208 	add.w	r2, r7, #8
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3301      	adds	r3, #1
 8007daa:	2202      	movs	r2, #2
 8007dac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007dae:	e100      	b.n	8007fb2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	f107 0208 	add.w	r2, r7, #8
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	701a      	strb	r2, [r3, #0]
    break;
 8007dca:	e0f2      	b.n	8007fb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	885b      	ldrh	r3, [r3, #2]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b05      	cmp	r3, #5
 8007dd4:	f200 80ac 	bhi.w	8007f30 <USBD_GetDescriptor+0x258>
 8007dd8:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <USBD_GetDescriptor+0x108>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007df9 	.word	0x08007df9
 8007de4:	08007e2d 	.word	0x08007e2d
 8007de8:	08007e61 	.word	0x08007e61
 8007dec:	08007e95 	.word	0x08007e95
 8007df0:	08007ec9 	.word	0x08007ec9
 8007df4:	08007efd 	.word	0x08007efd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7c12      	ldrb	r2, [r2, #16]
 8007e10:	f107 0108 	add.w	r1, r7, #8
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e1a:	e091      	b.n	8007f40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 faaa 	bl	8008378 <USBD_CtlError>
        err++;
 8007e24:	7afb      	ldrb	r3, [r7, #11]
 8007e26:	3301      	adds	r3, #1
 8007e28:	72fb      	strb	r3, [r7, #11]
      break;
 8007e2a:	e089      	b.n	8007f40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00b      	beq.n	8007e50 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	7c12      	ldrb	r2, [r2, #16]
 8007e44:	f107 0108 	add.w	r1, r7, #8
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
 8007e4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e4e:	e077      	b.n	8007f40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa90 	bl	8008378 <USBD_CtlError>
        err++;
 8007e58:	7afb      	ldrb	r3, [r7, #11]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	72fb      	strb	r3, [r7, #11]
      break;
 8007e5e:	e06f      	b.n	8007f40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00b      	beq.n	8007e84 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	7c12      	ldrb	r2, [r2, #16]
 8007e78:	f107 0108 	add.w	r1, r7, #8
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	4798      	blx	r3
 8007e80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e82:	e05d      	b.n	8007f40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa76 	bl	8008378 <USBD_CtlError>
        err++;
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	72fb      	strb	r3, [r7, #11]
      break;
 8007e92:	e055      	b.n	8007f40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00b      	beq.n	8007eb8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	7c12      	ldrb	r2, [r2, #16]
 8007eac:	f107 0108 	add.w	r1, r7, #8
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4798      	blx	r3
 8007eb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007eb6:	e043      	b.n	8007f40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa5c 	bl	8008378 <USBD_CtlError>
        err++;
 8007ec0:	7afb      	ldrb	r3, [r7, #11]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	72fb      	strb	r3, [r7, #11]
      break;
 8007ec6:	e03b      	b.n	8007f40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00b      	beq.n	8007eec <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	7c12      	ldrb	r2, [r2, #16]
 8007ee0:	f107 0108 	add.w	r1, r7, #8
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4798      	blx	r3
 8007ee8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007eea:	e029      	b.n	8007f40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa42 	bl	8008378 <USBD_CtlError>
        err++;
 8007ef4:	7afb      	ldrb	r3, [r7, #11]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	72fb      	strb	r3, [r7, #11]
      break;
 8007efa:	e021      	b.n	8007f40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	7c12      	ldrb	r2, [r2, #16]
 8007f14:	f107 0108 	add.w	r1, r7, #8
 8007f18:	4610      	mov	r0, r2
 8007f1a:	4798      	blx	r3
 8007f1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f1e:	e00f      	b.n	8007f40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fa28 	bl	8008378 <USBD_CtlError>
        err++;
 8007f28:	7afb      	ldrb	r3, [r7, #11]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007f2e:	e007      	b.n	8007f40 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fa20 	bl	8008378 <USBD_CtlError>
      err++;
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007f3e:	bf00      	nop
    }
    break;
 8007f40:	e037      	b.n	8007fb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7c1b      	ldrb	r3, [r3, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f52:	f107 0208 	add.w	r2, r7, #8
 8007f56:	4610      	mov	r0, r2
 8007f58:	4798      	blx	r3
 8007f5a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007f5c:	e029      	b.n	8007fb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fa09 	bl	8008378 <USBD_CtlError>
      err++;
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	72fb      	strb	r3, [r7, #11]
    break;
 8007f6c:	e021      	b.n	8007fb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	7c1b      	ldrb	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10d      	bne.n	8007f92 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7e:	f107 0208 	add.w	r2, r7, #8
 8007f82:	4610      	mov	r0, r2
 8007f84:	4798      	blx	r3
 8007f86:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	2207      	movs	r2, #7
 8007f8e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007f90:	e00f      	b.n	8007fb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f9ef 	bl	8008378 <USBD_CtlError>
      err++;
 8007f9a:	7afb      	ldrb	r3, [r7, #11]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	72fb      	strb	r3, [r7, #11]
    break;
 8007fa0:	e007      	b.n	8007fb2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f9e7 	bl	8008378 <USBD_CtlError>
    err++;
 8007faa:	7afb      	ldrb	r3, [r7, #11]
 8007fac:	3301      	adds	r3, #1
 8007fae:	72fb      	strb	r3, [r7, #11]
    break;
 8007fb0:	bf00      	nop
  }

  if (err != 0U)
 8007fb2:	7afb      	ldrb	r3, [r7, #11]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d11e      	bne.n	8007ff6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	88db      	ldrh	r3, [r3, #6]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d016      	beq.n	8007fee <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007fc0:	893b      	ldrh	r3, [r7, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00e      	beq.n	8007fe4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	88da      	ldrh	r2, [r3, #6]
 8007fca:	893b      	ldrh	r3, [r7, #8]
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	bf28      	it	cs
 8007fd0:	4613      	movcs	r3, r2
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fd6:	893b      	ldrh	r3, [r7, #8]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	68f9      	ldr	r1, [r7, #12]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fa3c 	bl	800845a <USBD_CtlSendData>
 8007fe2:	e009      	b.n	8007ff8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f9c6 	bl	8008378 <USBD_CtlError>
 8007fec:	e004      	b.n	8007ff8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa8d 	bl	800850e <USBD_CtlSendStatus>
 8007ff4:	e000      	b.n	8007ff8 <USBD_GetDescriptor+0x320>
    return;
 8007ff6:	bf00      	nop
    }
  }
}
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop

08008000 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	889b      	ldrh	r3, [r3, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d130      	bne.n	8008074 <USBD_SetAddress+0x74>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	88db      	ldrh	r3, [r3, #6]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d12c      	bne.n	8008074 <USBD_SetAddress+0x74>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	885b      	ldrh	r3, [r3, #2]
 800801e:	2b7f      	cmp	r3, #127	; 0x7f
 8008020:	d828      	bhi.n	8008074 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	885b      	ldrh	r3, [r3, #2]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800802c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008034:	2b03      	cmp	r3, #3
 8008036:	d104      	bne.n	8008042 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f99c 	bl	8008378 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008040:	e01c      	b.n	800807c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	7bfa      	ldrb	r2, [r7, #15]
 8008046:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 ff0c 	bl	8008e6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fa5a 	bl	800850e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008068:	e008      	b.n	800807c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008072:	e003      	b.n	800807c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f97e 	bl	8008378 <USBD_CtlError>
  }
}
 800807c:	bf00      	nop
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	885b      	ldrh	r3, [r3, #2]
 8008096:	b2da      	uxtb	r2, r3
 8008098:	4b4b      	ldr	r3, [pc, #300]	; (80081c8 <USBD_SetConfig+0x144>)
 800809a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800809c:	4b4a      	ldr	r3, [pc, #296]	; (80081c8 <USBD_SetConfig+0x144>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d905      	bls.n	80080b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f966 	bl	8008378 <USBD_CtlError>
    return USBD_FAIL;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e087      	b.n	80081c0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d002      	beq.n	80080c0 <USBD_SetConfig+0x3c>
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d025      	beq.n	800810a <USBD_SetConfig+0x86>
 80080be:	e071      	b.n	80081a4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80080c0:	4b41      	ldr	r3, [pc, #260]	; (80081c8 <USBD_SetConfig+0x144>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01c      	beq.n	8008102 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80080c8:	4b3f      	ldr	r3, [pc, #252]	; (80081c8 <USBD_SetConfig+0x144>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80080d2:	4b3d      	ldr	r3, [pc, #244]	; (80081c8 <USBD_SetConfig+0x144>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff f9bd 	bl	8007458 <USBD_SetClassConfig>
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d004      	beq.n	80080f2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f944 	bl	8008378 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80080f0:	e065      	b.n	80081be <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa0b 	bl	800850e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2203      	movs	r2, #3
 80080fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008100:	e05d      	b.n	80081be <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa03 	bl	800850e <USBD_CtlSendStatus>
    break;
 8008108:	e059      	b.n	80081be <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800810a:	4b2f      	ldr	r3, [pc, #188]	; (80081c8 <USBD_SetConfig+0x144>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d112      	bne.n	8008138 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2202      	movs	r2, #2
 8008116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800811a:	4b2b      	ldr	r3, [pc, #172]	; (80081c8 <USBD_SetConfig+0x144>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008124:	4b28      	ldr	r3, [pc, #160]	; (80081c8 <USBD_SetConfig+0x144>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff f9b0 	bl	8007490 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f9ec 	bl	800850e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008136:	e042      	b.n	80081be <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008138:	4b23      	ldr	r3, [pc, #140]	; (80081c8 <USBD_SetConfig+0x144>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	d02a      	beq.n	800819c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff f99e 	bl	8007490 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008154:	4b1c      	ldr	r3, [pc, #112]	; (80081c8 <USBD_SetConfig+0x144>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800815e:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <USBD_SetConfig+0x144>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff f977 	bl	8007458 <USBD_SetClassConfig>
 800816a:	4603      	mov	r3, r0
 800816c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00f      	beq.n	8008194 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f8fe 	bl	8008378 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff f983 	bl	8007490 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2202      	movs	r2, #2
 800818e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008192:	e014      	b.n	80081be <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f9ba 	bl	800850e <USBD_CtlSendStatus>
    break;
 800819a:	e010      	b.n	80081be <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f9b6 	bl	800850e <USBD_CtlSendStatus>
    break;
 80081a2:	e00c      	b.n	80081be <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f8e6 	bl	8008378 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081ac:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <USBD_SetConfig+0x144>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7ff f96c 	bl	8007490 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80081b8:	2303      	movs	r3, #3
 80081ba:	73fb      	strb	r3, [r7, #15]
    break;
 80081bc:	bf00      	nop
  }

  return ret;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20000214 	.word	0x20000214

080081cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	88db      	ldrh	r3, [r3, #6]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d004      	beq.n	80081e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f8c9 	bl	8008378 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80081e6:	e021      	b.n	800822c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	db17      	blt.n	8008222 <USBD_GetConfig+0x56>
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	dd02      	ble.n	80081fc <USBD_GetConfig+0x30>
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d00b      	beq.n	8008212 <USBD_GetConfig+0x46>
 80081fa:	e012      	b.n	8008222 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3308      	adds	r3, #8
 8008206:	2201      	movs	r2, #1
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f925 	bl	800845a <USBD_CtlSendData>
      break;
 8008210:	e00c      	b.n	800822c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3304      	adds	r3, #4
 8008216:	2201      	movs	r2, #1
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f91d 	bl	800845a <USBD_CtlSendData>
      break;
 8008220:	e004      	b.n	800822c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f8a7 	bl	8008378 <USBD_CtlError>
      break;
 800822a:	bf00      	nop
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008244:	3b01      	subs	r3, #1
 8008246:	2b02      	cmp	r3, #2
 8008248:	d81e      	bhi.n	8008288 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	88db      	ldrh	r3, [r3, #6]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d004      	beq.n	800825c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f88f 	bl	8008378 <USBD_CtlError>
      break;
 800825a:	e01a      	b.n	8008292 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f043 0202 	orr.w	r2, r3, #2
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	330c      	adds	r3, #12
 800827c:	2202      	movs	r2, #2
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f8ea 	bl	800845a <USBD_CtlSendData>
    break;
 8008286:	e004      	b.n	8008292 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f874 	bl	8008378 <USBD_CtlError>
    break;
 8008290:	bf00      	nop
  }
}
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	885b      	ldrh	r3, [r3, #2]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d106      	bne.n	80082ba <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f92a 	bl	800850e <USBD_CtlSendStatus>
  }
}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d2:	3b01      	subs	r3, #1
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d80b      	bhi.n	80082f0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	885b      	ldrh	r3, [r3, #2]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d10c      	bne.n	80082fa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f910 	bl	800850e <USBD_CtlSendStatus>
      }
      break;
 80082ee:	e004      	b.n	80082fa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f840 	bl	8008378 <USBD_CtlError>
      break;
 80082f8:	e000      	b.n	80082fc <USBD_ClrFeature+0x3a>
      break;
 80082fa:	bf00      	nop
  }
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	781a      	ldrb	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	781a      	ldrb	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff faa8 	bl	8007884 <SWAPBYTE>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3301      	adds	r3, #1
 8008346:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f7ff fa9b 	bl	8007884 <SWAPBYTE>
 800834e:	4603      	mov	r3, r0
 8008350:	461a      	mov	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3301      	adds	r3, #1
 800835a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f7ff fa8e 	bl	8007884 <SWAPBYTE>
 8008368:	4603      	mov	r3, r0
 800836a:	461a      	mov	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	80da      	strh	r2, [r3, #6]
}
 8008370:	bf00      	nop
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008382:	2180      	movs	r1, #128	; 0x80
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fcd7 	bl	8008d38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800838a:	2100      	movs	r1, #0
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fcd3 	bl	8008d38 <USBD_LL_StallEP>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b086      	sub	sp, #24
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d036      	beq.n	800841e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083b4:	6938      	ldr	r0, [r7, #16]
 80083b6:	f000 f836 	bl	8008426 <USBD_GetLen>
 80083ba:	4603      	mov	r3, r0
 80083bc:	3301      	adds	r3, #1
 80083be:	b29b      	uxth	r3, r3
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4413      	add	r3, r2
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	3301      	adds	r3, #1
 80083d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	4413      	add	r3, r2
 80083e0:	2203      	movs	r2, #3
 80083e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	3301      	adds	r3, #1
 80083e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083ea:	e013      	b.n	8008414 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	4413      	add	r3, r2
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	7812      	ldrb	r2, [r2, #0]
 80083f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	3301      	adds	r3, #1
 80083fc:	613b      	str	r3, [r7, #16]
    idx++;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	3301      	adds	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	4413      	add	r3, r2
 800840a:	2200      	movs	r2, #0
 800840c:	701a      	strb	r2, [r3, #0]
    idx++;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	3301      	adds	r3, #1
 8008412:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e7      	bne.n	80083ec <USBD_GetString+0x52>
 800841c:	e000      	b.n	8008420 <USBD_GetString+0x86>
    return;
 800841e:	bf00      	nop
  }
}
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008426:	b480      	push	{r7}
 8008428:	b085      	sub	sp, #20
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008436:	e005      	b.n	8008444 <USBD_GetLen+0x1e>
  {
    len++;
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	3301      	adds	r3, #1
 800843c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	3301      	adds	r3, #1
 8008442:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1f5      	bne.n	8008438 <USBD_GetLen+0x12>
  }

  return len;
 800844c:	7bfb      	ldrb	r3, [r7, #15]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2202      	movs	r2, #2
 800846a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	2100      	movs	r1, #0
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 fd29 	bl	8008ed8 <USBD_LL_Transmit>

  return USBD_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	2100      	movs	r1, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fd18 	bl	8008ed8 <USBD_LL_Transmit>

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2203      	movs	r2, #3
 80084c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	2100      	movs	r1, #0
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 fd33 	bl	8008f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	2100      	movs	r1, #0
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 fd22 	bl	8008f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2204      	movs	r2, #4
 800851a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800851e:	2300      	movs	r3, #0
 8008520:	2200      	movs	r2, #0
 8008522:	2100      	movs	r1, #0
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fcd7 	bl	8008ed8 <USBD_LL_Transmit>

  return USBD_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2205      	movs	r2, #5
 8008540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008544:	2300      	movs	r3, #0
 8008546:	2200      	movs	r2, #0
 8008548:	2100      	movs	r1, #0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fcfc 	bl	8008f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008560:	2200      	movs	r2, #0
 8008562:	4912      	ldr	r1, [pc, #72]	; (80085ac <MX_USB_DEVICE_Init+0x50>)
 8008564:	4812      	ldr	r0, [pc, #72]	; (80085b0 <MX_USB_DEVICE_Init+0x54>)
 8008566:	f7fe ff09 	bl	800737c <USBD_Init>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008570:	f7f8 f844 	bl	80005fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008574:	490f      	ldr	r1, [pc, #60]	; (80085b4 <MX_USB_DEVICE_Init+0x58>)
 8008576:	480e      	ldr	r0, [pc, #56]	; (80085b0 <MX_USB_DEVICE_Init+0x54>)
 8008578:	f7fe ff30 	bl	80073dc <USBD_RegisterClass>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008582:	f7f8 f83b 	bl	80005fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008586:	490c      	ldr	r1, [pc, #48]	; (80085b8 <MX_USB_DEVICE_Init+0x5c>)
 8008588:	4809      	ldr	r0, [pc, #36]	; (80085b0 <MX_USB_DEVICE_Init+0x54>)
 800858a:	f7fe fe5b 	bl	8007244 <USBD_CDC_RegisterInterface>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008594:	f7f8 f832 	bl	80005fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008598:	4805      	ldr	r0, [pc, #20]	; (80085b0 <MX_USB_DEVICE_Init+0x54>)
 800859a:	f7fe ff46 	bl	800742a <USBD_Start>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085a4:	f7f8 f82a 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085a8:	bf00      	nop
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20000130 	.word	0x20000130
 80085b0:	200002c0 	.word	0x200002c0
 80085b4:	20000018 	.word	0x20000018
 80085b8:	2000011c 	.word	0x2000011c

080085bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085c0:	2200      	movs	r2, #0
 80085c2:	4905      	ldr	r1, [pc, #20]	; (80085d8 <CDC_Init_FS+0x1c>)
 80085c4:	4805      	ldr	r0, [pc, #20]	; (80085dc <CDC_Init_FS+0x20>)
 80085c6:	f7fe fe52 	bl	800726e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085ca:	4905      	ldr	r1, [pc, #20]	; (80085e0 <CDC_Init_FS+0x24>)
 80085cc:	4803      	ldr	r0, [pc, #12]	; (80085dc <CDC_Init_FS+0x20>)
 80085ce:	f7fe fe67 	bl	80072a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	20000978 	.word	0x20000978
 80085dc:	200002c0 	.word	0x200002c0
 80085e0:	20000590 	.word	0x20000590

080085e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	6039      	str	r1, [r7, #0]
 80085fe:	71fb      	strb	r3, [r7, #7]
 8008600:	4613      	mov	r3, r2
 8008602:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b23      	cmp	r3, #35	; 0x23
 8008608:	d84a      	bhi.n	80086a0 <CDC_Control_FS+0xac>
 800860a:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <CDC_Control_FS+0x1c>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	080086a1 	.word	0x080086a1
 8008614:	080086a1 	.word	0x080086a1
 8008618:	080086a1 	.word	0x080086a1
 800861c:	080086a1 	.word	0x080086a1
 8008620:	080086a1 	.word	0x080086a1
 8008624:	080086a1 	.word	0x080086a1
 8008628:	080086a1 	.word	0x080086a1
 800862c:	080086a1 	.word	0x080086a1
 8008630:	080086a1 	.word	0x080086a1
 8008634:	080086a1 	.word	0x080086a1
 8008638:	080086a1 	.word	0x080086a1
 800863c:	080086a1 	.word	0x080086a1
 8008640:	080086a1 	.word	0x080086a1
 8008644:	080086a1 	.word	0x080086a1
 8008648:	080086a1 	.word	0x080086a1
 800864c:	080086a1 	.word	0x080086a1
 8008650:	080086a1 	.word	0x080086a1
 8008654:	080086a1 	.word	0x080086a1
 8008658:	080086a1 	.word	0x080086a1
 800865c:	080086a1 	.word	0x080086a1
 8008660:	080086a1 	.word	0x080086a1
 8008664:	080086a1 	.word	0x080086a1
 8008668:	080086a1 	.word	0x080086a1
 800866c:	080086a1 	.word	0x080086a1
 8008670:	080086a1 	.word	0x080086a1
 8008674:	080086a1 	.word	0x080086a1
 8008678:	080086a1 	.word	0x080086a1
 800867c:	080086a1 	.word	0x080086a1
 8008680:	080086a1 	.word	0x080086a1
 8008684:	080086a1 	.word	0x080086a1
 8008688:	080086a1 	.word	0x080086a1
 800868c:	080086a1 	.word	0x080086a1
 8008690:	080086a1 	.word	0x080086a1
 8008694:	080086a1 	.word	0x080086a1
 8008698:	080086a1 	.word	0x080086a1
 800869c:	080086a1 	.word	0x080086a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086a0:	bf00      	nop
  }

  return (USBD_OK);
 80086a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	4805      	ldr	r0, [pc, #20]	; (80086d4 <CDC_Receive_FS+0x24>)
 80086be:	f7fe fdef 	bl	80072a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086c2:	4804      	ldr	r0, [pc, #16]	; (80086d4 <CDC_Receive_FS+0x24>)
 80086c4:	f7fe fe30 	bl	8007328 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	200002c0 	.word	0x200002c0

080086d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086e8:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <CDC_Transmit_FS+0x48>)
 80086ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e00b      	b.n	8008716 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086fe:	887b      	ldrh	r3, [r7, #2]
 8008700:	461a      	mov	r2, r3
 8008702:	6879      	ldr	r1, [r7, #4]
 8008704:	4806      	ldr	r0, [pc, #24]	; (8008720 <CDC_Transmit_FS+0x48>)
 8008706:	f7fe fdb2 	bl	800726e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800870a:	4805      	ldr	r0, [pc, #20]	; (8008720 <CDC_Transmit_FS+0x48>)
 800870c:	f7fe fddc 	bl	80072c8 <USBD_CDC_TransmitPacket>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	200002c0 	.word	0x200002c0

08008724 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800873a:	4618      	mov	r0, r3
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	6039      	str	r1, [r7, #0]
 8008752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2212      	movs	r2, #18
 8008758:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800875a:	4b03      	ldr	r3, [pc, #12]	; (8008768 <USBD_FS_DeviceDescriptor+0x20>)
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	20000150 	.word	0x20000150

0800876c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	6039      	str	r1, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2204      	movs	r2, #4
 800877c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800877e:	4b03      	ldr	r3, [pc, #12]	; (800878c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	20000170 	.word	0x20000170

08008790 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	4603      	mov	r3, r0
 8008798:	6039      	str	r1, [r7, #0]
 800879a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d105      	bne.n	80087ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	4907      	ldr	r1, [pc, #28]	; (80087c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80087a6:	4808      	ldr	r0, [pc, #32]	; (80087c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80087a8:	f7ff fdf7 	bl	800839a <USBD_GetString>
 80087ac:	e004      	b.n	80087b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	4904      	ldr	r1, [pc, #16]	; (80087c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80087b2:	4805      	ldr	r0, [pc, #20]	; (80087c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80087b4:	f7ff fdf1 	bl	800839a <USBD_GetString>
  }
  return USBD_StrDesc;
 80087b8:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000d60 	.word	0x20000d60
 80087c8:	08009268 	.word	0x08009268

080087cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	6039      	str	r1, [r7, #0]
 80087d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	4904      	ldr	r1, [pc, #16]	; (80087ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087dc:	4804      	ldr	r0, [pc, #16]	; (80087f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087de:	f7ff fddc 	bl	800839a <USBD_GetString>
  return USBD_StrDesc;
 80087e2:	4b02      	ldr	r3, [pc, #8]	; (80087ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	20000d60 	.word	0x20000d60
 80087f0:	08009280 	.word	0x08009280

080087f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	221a      	movs	r2, #26
 8008804:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008806:	f000 f855 	bl	80088b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800880a:	4b02      	ldr	r3, [pc, #8]	; (8008814 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20000174 	.word	0x20000174

08008818 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	6039      	str	r1, [r7, #0]
 8008822:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d105      	bne.n	8008836 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	4907      	ldr	r1, [pc, #28]	; (800884c <USBD_FS_ConfigStrDescriptor+0x34>)
 800882e:	4808      	ldr	r0, [pc, #32]	; (8008850 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008830:	f7ff fdb3 	bl	800839a <USBD_GetString>
 8008834:	e004      	b.n	8008840 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	4904      	ldr	r1, [pc, #16]	; (800884c <USBD_FS_ConfigStrDescriptor+0x34>)
 800883a:	4805      	ldr	r0, [pc, #20]	; (8008850 <USBD_FS_ConfigStrDescriptor+0x38>)
 800883c:	f7ff fdad 	bl	800839a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008840:	4b02      	ldr	r3, [pc, #8]	; (800884c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000d60 	.word	0x20000d60
 8008850:	08009294 	.word	0x08009294

08008854 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	6039      	str	r1, [r7, #0]
 800885e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d105      	bne.n	8008872 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	4907      	ldr	r1, [pc, #28]	; (8008888 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800886a:	4808      	ldr	r0, [pc, #32]	; (800888c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800886c:	f7ff fd95 	bl	800839a <USBD_GetString>
 8008870:	e004      	b.n	800887c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	4904      	ldr	r1, [pc, #16]	; (8008888 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008876:	4805      	ldr	r0, [pc, #20]	; (800888c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008878:	f7ff fd8f 	bl	800839a <USBD_GetString>
  }
  return USBD_StrDesc;
 800887c:	4b02      	ldr	r3, [pc, #8]	; (8008888 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000d60 	.word	0x20000d60
 800888c:	080092a0 	.word	0x080092a0

08008890 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	6039      	str	r1, [r7, #0]
 800889a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	220c      	movs	r2, #12
 80088a0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80088a2:	4b03      	ldr	r3, [pc, #12]	; (80088b0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	20000164 	.word	0x20000164

080088b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088ba:	4b0f      	ldr	r3, [pc, #60]	; (80088f8 <Get_SerialNum+0x44>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088c0:	4b0e      	ldr	r3, [pc, #56]	; (80088fc <Get_SerialNum+0x48>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088c6:	4b0e      	ldr	r3, [pc, #56]	; (8008900 <Get_SerialNum+0x4c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4413      	add	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d009      	beq.n	80088ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088da:	2208      	movs	r2, #8
 80088dc:	4909      	ldr	r1, [pc, #36]	; (8008904 <Get_SerialNum+0x50>)
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 f814 	bl	800890c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088e4:	2204      	movs	r2, #4
 80088e6:	4908      	ldr	r1, [pc, #32]	; (8008908 <Get_SerialNum+0x54>)
 80088e8:	68b8      	ldr	r0, [r7, #8]
 80088ea:	f000 f80f 	bl	800890c <IntToUnicode>
  }
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	1fff7590 	.word	0x1fff7590
 80088fc:	1fff7594 	.word	0x1fff7594
 8008900:	1fff7598 	.word	0x1fff7598
 8008904:	20000176 	.word	0x20000176
 8008908:	20000186 	.word	0x20000186

0800890c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	4613      	mov	r3, r2
 8008918:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800891e:	2300      	movs	r3, #0
 8008920:	75fb      	strb	r3, [r7, #23]
 8008922:	e027      	b.n	8008974 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	0f1b      	lsrs	r3, r3, #28
 8008928:	2b09      	cmp	r3, #9
 800892a:	d80b      	bhi.n	8008944 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	0f1b      	lsrs	r3, r3, #28
 8008930:	b2da      	uxtb	r2, r3
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	4619      	mov	r1, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	440b      	add	r3, r1
 800893c:	3230      	adds	r2, #48	; 0x30
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	e00a      	b.n	800895a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	0f1b      	lsrs	r3, r3, #28
 8008948:	b2da      	uxtb	r2, r3
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	4619      	mov	r1, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	440b      	add	r3, r1
 8008954:	3237      	adds	r2, #55	; 0x37
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	011b      	lsls	r3, r3, #4
 800895e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	3301      	adds	r3, #1
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	4413      	add	r3, r2
 800896a:	2200      	movs	r2, #0
 800896c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	3301      	adds	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]
 8008974:	7dfa      	ldrb	r2, [r7, #23]
 8008976:	79fb      	ldrb	r3, [r7, #7]
 8008978:	429a      	cmp	r2, r3
 800897a:	d3d3      	bcc.n	8008924 <IntToUnicode+0x18>
  }
}
 800897c:	bf00      	nop
 800897e:	371c      	adds	r7, #28
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a0d      	ldr	r2, [pc, #52]	; (80089cc <HAL_PCD_MspInit+0x44>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d113      	bne.n	80089c2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800899a:	4b0d      	ldr	r3, [pc, #52]	; (80089d0 <HAL_PCD_MspInit+0x48>)
 800899c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899e:	4a0c      	ldr	r2, [pc, #48]	; (80089d0 <HAL_PCD_MspInit+0x48>)
 80089a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089a4:	6593      	str	r3, [r2, #88]	; 0x58
 80089a6:	4b0a      	ldr	r3, [pc, #40]	; (80089d0 <HAL_PCD_MspInit+0x48>)
 80089a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80089b2:	2200      	movs	r2, #0
 80089b4:	2100      	movs	r1, #0
 80089b6:	2043      	movs	r0, #67	; 0x43
 80089b8:	f7f8 ffb1 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80089bc:	2043      	movs	r0, #67	; 0x43
 80089be:	f7f8 ffca 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80089c2:	bf00      	nop
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	40006800 	.word	0x40006800
 80089d0:	40021000 	.word	0x40021000

080089d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80089e8:	4619      	mov	r1, r3
 80089ea:	4610      	mov	r0, r2
 80089ec:	f7fe fd68 	bl	80074c0 <USBD_LL_SetupStage>
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008a0a:	78fa      	ldrb	r2, [r7, #3]
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	00db      	lsls	r3, r3, #3
 8008a16:	440b      	add	r3, r1
 8008a18:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	4619      	mov	r1, r3
 8008a22:	f7fe fda0 	bl	8007566 <USBD_LL_DataOutStage>
}
 8008a26:	bf00      	nop
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	4613      	mov	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	440b      	add	r3, r1
 8008a4e:	333c      	adds	r3, #60	; 0x3c
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	78fb      	ldrb	r3, [r7, #3]
 8008a54:	4619      	mov	r1, r3
 8008a56:	f7fe fde9 	bl	800762c <USBD_LL_DataInStage>
}
 8008a5a:	bf00      	nop
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b082      	sub	sp, #8
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fe feed 	bl	8007850 <USBD_LL_SOF>
}
 8008a76:	bf00      	nop
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a86:	2301      	movs	r3, #1
 8008a88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d001      	beq.n	8008a96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a92:	f7f7 fdb3 	bl	80005fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008a9c:	7bfa      	ldrb	r2, [r7, #15]
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fe9a 	bl	80077da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe fe53 	bl	8007758 <USBD_LL_Reset>
}
 8008ab2:	bf00      	nop
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fe95 	bl	80077fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ad8:	4b04      	ldr	r3, [pc, #16]	; (8008aec <HAL_PCD_SuspendCallback+0x30>)
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	4a03      	ldr	r2, [pc, #12]	; (8008aec <HAL_PCD_SuspendCallback+0x30>)
 8008ade:	f043 0306 	orr.w	r3, r3, #6
 8008ae2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	e000ed00 	.word	0xe000ed00

08008af0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d007      	beq.n	8008b10 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b00:	4b08      	ldr	r3, [pc, #32]	; (8008b24 <HAL_PCD_ResumeCallback+0x34>)
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	4a07      	ldr	r2, [pc, #28]	; (8008b24 <HAL_PCD_ResumeCallback+0x34>)
 8008b06:	f023 0306 	bic.w	r3, r3, #6
 8008b0a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008b0c:	f000 fa9e 	bl	800904c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe fe84 	bl	8007824 <USBD_LL_Resume>
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	e000ed00 	.word	0xe000ed00

08008b28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008b30:	f7fa fdf4 	bl	800371c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b34:	4a2b      	ldr	r2, [pc, #172]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a29      	ldr	r2, [pc, #164]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008b44:	4b27      	ldr	r3, [pc, #156]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b46:	4a28      	ldr	r2, [pc, #160]	; (8008be8 <USBD_LL_Init+0xc0>)
 8008b48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b4a:	4b26      	ldr	r3, [pc, #152]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b4c:	2208      	movs	r2, #8
 8008b4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b50:	4b24      	ldr	r3, [pc, #144]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b52:	2202      	movs	r2, #2
 8008b54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b56:	4b23      	ldr	r3, [pc, #140]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b58:	2202      	movs	r2, #2
 8008b5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008b5c:	4b21      	ldr	r3, [pc, #132]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b62:	4b20      	ldr	r3, [pc, #128]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008b68:	4b1e      	ldr	r3, [pc, #120]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b6e:	4b1d      	ldr	r3, [pc, #116]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b74:	481b      	ldr	r0, [pc, #108]	; (8008be4 <USBD_LL_Init+0xbc>)
 8008b76:	f7f9 f9d7 	bl	8001f28 <HAL_PCD_Init>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008b80:	f7f7 fd3c 	bl	80005fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b8a:	2318      	movs	r3, #24
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2100      	movs	r1, #0
 8008b90:	f7fa fcf2 	bl	8003578 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b9a:	2358      	movs	r3, #88	; 0x58
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2180      	movs	r1, #128	; 0x80
 8008ba0:	f7fa fcea 	bl	8003578 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008baa:	23c0      	movs	r3, #192	; 0xc0
 8008bac:	2200      	movs	r2, #0
 8008bae:	2181      	movs	r1, #129	; 0x81
 8008bb0:	f7fa fce2 	bl	8003578 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bba:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	f7fa fcd9 	bl	8003578 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2182      	movs	r1, #130	; 0x82
 8008bd4:	f7fa fcd0 	bl	8003578 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000f60 	.word	0x20000f60
 8008be8:	40006800 	.word	0x40006800

08008bec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7f9 faa2 	bl	800214c <HAL_PCD_Start>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d816      	bhi.n	8008c40 <USBD_LL_Start+0x54>
 8008c12:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <USBD_LL_Start+0x2c>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008c29 	.word	0x08008c29
 8008c1c:	08008c2f 	.word	0x08008c2f
 8008c20:	08008c35 	.word	0x08008c35
 8008c24:	08008c3b 	.word	0x08008c3b
    case HAL_OK :
      usb_status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2c:	e00b      	b.n	8008c46 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	73fb      	strb	r3, [r7, #15]
    break;
 8008c32:	e008      	b.n	8008c46 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c34:	2301      	movs	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
    break;
 8008c38:	e005      	b.n	8008c46 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3e:	e002      	b.n	8008c46 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	73fb      	strb	r3, [r7, #15]
    break;
 8008c44:	bf00      	nop
  }
  return usb_status;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	4608      	mov	r0, r1
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	4603      	mov	r3, r0
 8008c60:	70fb      	strb	r3, [r7, #3]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70bb      	strb	r3, [r7, #2]
 8008c66:	4613      	mov	r3, r2
 8008c68:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c78:	78bb      	ldrb	r3, [r7, #2]
 8008c7a:	883a      	ldrh	r2, [r7, #0]
 8008c7c:	78f9      	ldrb	r1, [r7, #3]
 8008c7e:	f7f9 fbfa 	bl	8002476 <HAL_PCD_EP_Open>
 8008c82:	4603      	mov	r3, r0
 8008c84:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d817      	bhi.n	8008cbc <USBD_LL_OpenEP+0x6c>
 8008c8c:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <USBD_LL_OpenEP+0x44>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008ca5 	.word	0x08008ca5
 8008c98:	08008cab 	.word	0x08008cab
 8008c9c:	08008cb1 	.word	0x08008cb1
 8008ca0:	08008cb7 	.word	0x08008cb7
    case HAL_OK :
      usb_status = USBD_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca8:	e00b      	b.n	8008cc2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008caa:	2303      	movs	r3, #3
 8008cac:	73fb      	strb	r3, [r7, #15]
    break;
 8008cae:	e008      	b.n	8008cc2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb4:	e005      	b.n	8008cc2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cba:	e002      	b.n	8008cc2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc0:	bf00      	nop
  }
  return usb_status;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ce6:	78fa      	ldrb	r2, [r7, #3]
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7f9 fc29 	bl	8002542 <HAL_PCD_EP_Close>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d816      	bhi.n	8008d28 <USBD_LL_CloseEP+0x5c>
 8008cfa:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <USBD_LL_CloseEP+0x34>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d11 	.word	0x08008d11
 8008d04:	08008d17 	.word	0x08008d17
 8008d08:	08008d1d 	.word	0x08008d1d
 8008d0c:	08008d23 	.word	0x08008d23
    case HAL_OK :
      usb_status = USBD_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
    break;
 8008d14:	e00b      	b.n	8008d2e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d16:	2303      	movs	r3, #3
 8008d18:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1a:	e008      	b.n	8008d2e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d20:	e005      	b.n	8008d2e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d22:	2303      	movs	r3, #3
 8008d24:	73fb      	strb	r3, [r7, #15]
    break;
 8008d26:	e002      	b.n	8008d2e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2c:	bf00      	nop
  }
  return usb_status;
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d52:	78fa      	ldrb	r2, [r7, #3]
 8008d54:	4611      	mov	r1, r2
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7f9 fcd3 	bl	8002702 <HAL_PCD_EP_SetStall>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d816      	bhi.n	8008d94 <USBD_LL_StallEP+0x5c>
 8008d66:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <USBD_LL_StallEP+0x34>)
 8008d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6c:	08008d7d 	.word	0x08008d7d
 8008d70:	08008d83 	.word	0x08008d83
 8008d74:	08008d89 	.word	0x08008d89
 8008d78:	08008d8f 	.word	0x08008d8f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d80:	e00b      	b.n	8008d9a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d82:	2303      	movs	r3, #3
 8008d84:	73fb      	strb	r3, [r7, #15]
    break;
 8008d86:	e008      	b.n	8008d9a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8c:	e005      	b.n	8008d9a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	73fb      	strb	r3, [r7, #15]
    break;
 8008d92:	e002      	b.n	8008d9a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	bf00      	nop
  }
  return usb_status;
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f9 fcfd 	bl	80027c2 <HAL_PCD_EP_ClrStall>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008dcc:	7bbb      	ldrb	r3, [r7, #14]
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d816      	bhi.n	8008e00 <USBD_LL_ClearStallEP+0x5c>
 8008dd2:	a201      	add	r2, pc, #4	; (adr r2, 8008dd8 <USBD_LL_ClearStallEP+0x34>)
 8008dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd8:	08008de9 	.word	0x08008de9
 8008ddc:	08008def 	.word	0x08008def
 8008de0:	08008df5 	.word	0x08008df5
 8008de4:	08008dfb 	.word	0x08008dfb
    case HAL_OK :
      usb_status = USBD_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
    break;
 8008dec:	e00b      	b.n	8008e06 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dee:	2303      	movs	r3, #3
 8008df0:	73fb      	strb	r3, [r7, #15]
    break;
 8008df2:	e008      	b.n	8008e06 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008df4:	2301      	movs	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]
    break;
 8008df8:	e005      	b.n	8008e06 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dfe:	e002      	b.n	8008e06 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008e00:	2303      	movs	r3, #3
 8008e02:	73fb      	strb	r3, [r7, #15]
    break;
 8008e04:	bf00      	nop
  }
  return usb_status;
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	da0c      	bge.n	8008e46 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	440b      	add	r3, r1
 8008e40:	3302      	adds	r3, #2
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	e00b      	b.n	8008e5e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e4c:	68f9      	ldr	r1, [r7, #12]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	440b      	add	r3, r1
 8008e58:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008e5c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
	...

08008e6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7f9 face 	bl	800242c <HAL_PCD_SetAddress>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d816      	bhi.n	8008ec8 <USBD_LL_SetUSBAddress+0x5c>
 8008e9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <USBD_LL_SetUSBAddress+0x34>)
 8008e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea0:	08008eb1 	.word	0x08008eb1
 8008ea4:	08008eb7 	.word	0x08008eb7
 8008ea8:	08008ebd 	.word	0x08008ebd
 8008eac:	08008ec3 	.word	0x08008ec3
    case HAL_OK :
      usb_status = USBD_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb4:	e00b      	b.n	8008ece <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eba:	e008      	b.n	8008ece <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec0:	e005      	b.n	8008ece <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec6:	e002      	b.n	8008ece <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ecc:	bf00      	nop
  }
  return usb_status;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	607a      	str	r2, [r7, #4]
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ef6:	7af9      	ldrb	r1, [r7, #11]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	f7f9 fbbe 	bl	800267c <HAL_PCD_EP_Transmit>
 8008f00:	4603      	mov	r3, r0
 8008f02:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008f04:	7dbb      	ldrb	r3, [r7, #22]
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d816      	bhi.n	8008f38 <USBD_LL_Transmit+0x60>
 8008f0a:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <USBD_LL_Transmit+0x38>)
 8008f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f10:	08008f21 	.word	0x08008f21
 8008f14:	08008f27 	.word	0x08008f27
 8008f18:	08008f2d 	.word	0x08008f2d
 8008f1c:	08008f33 	.word	0x08008f33
    case HAL_OK :
      usb_status = USBD_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	75fb      	strb	r3, [r7, #23]
    break;
 8008f24:	e00b      	b.n	8008f3e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f26:	2303      	movs	r3, #3
 8008f28:	75fb      	strb	r3, [r7, #23]
    break;
 8008f2a:	e008      	b.n	8008f3e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
    break;
 8008f30:	e005      	b.n	8008f3e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f32:	2303      	movs	r3, #3
 8008f34:	75fb      	strb	r3, [r7, #23]
    break;
 8008f36:	e002      	b.n	8008f3e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	75fb      	strb	r3, [r7, #23]
    break;
 8008f3c:	bf00      	nop
  }
  return usb_status;
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3718      	adds	r7, #24
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	607a      	str	r2, [r7, #4]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	460b      	mov	r3, r1
 8008f56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f66:	7af9      	ldrb	r1, [r7, #11]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	f7f9 fb31 	bl	80025d2 <HAL_PCD_EP_Receive>
 8008f70:	4603      	mov	r3, r0
 8008f72:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008f74:	7dbb      	ldrb	r3, [r7, #22]
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d816      	bhi.n	8008fa8 <USBD_LL_PrepareReceive+0x60>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <USBD_LL_PrepareReceive+0x38>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08008f91 	.word	0x08008f91
 8008f84:	08008f97 	.word	0x08008f97
 8008f88:	08008f9d 	.word	0x08008f9d
 8008f8c:	08008fa3 	.word	0x08008fa3
    case HAL_OK :
      usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	75fb      	strb	r3, [r7, #23]
    break;
 8008f94:	e00b      	b.n	8008fae <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f96:	2303      	movs	r3, #3
 8008f98:	75fb      	strb	r3, [r7, #23]
    break;
 8008f9a:	e008      	b.n	8008fae <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	75fb      	strb	r3, [r7, #23]
    break;
 8008fa0:	e005      	b.n	8008fae <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	75fb      	strb	r3, [r7, #23]
    break;
 8008fa6:	e002      	b.n	8008fae <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	75fb      	strb	r3, [r7, #23]
    break;
 8008fac:	bf00      	nop
  }
  return usb_status;
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fca:	78fa      	ldrb	r2, [r7, #3]
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f9 fb3c 	bl	800264c <HAL_PCD_EP_GetRxCount>
 8008fd4:	4603      	mov	r3, r0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008fec:	78fb      	ldrb	r3, [r7, #3]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <HAL_PCDEx_LPM_Callback+0x18>
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d013      	beq.n	800901e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008ff6:	e023      	b.n	8009040 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d007      	beq.n	8009010 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009000:	f000 f824 	bl	800904c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009004:	4b10      	ldr	r3, [pc, #64]	; (8009048 <HAL_PCDEx_LPM_Callback+0x68>)
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	4a0f      	ldr	r2, [pc, #60]	; (8009048 <HAL_PCDEx_LPM_Callback+0x68>)
 800900a:	f023 0306 	bic.w	r3, r3, #6
 800900e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe fc04 	bl	8007824 <USBD_LL_Resume>
    break;
 800901c:	e010      	b.n	8009040 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe fbe8 	bl	80077fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d005      	beq.n	800903e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009032:	4b05      	ldr	r3, [pc, #20]	; (8009048 <HAL_PCDEx_LPM_Callback+0x68>)
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	4a04      	ldr	r2, [pc, #16]	; (8009048 <HAL_PCDEx_LPM_Callback+0x68>)
 8009038:	f043 0306 	orr.w	r3, r3, #6
 800903c:	6113      	str	r3, [r2, #16]
    break;
 800903e:	bf00      	nop
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	e000ed00 	.word	0xe000ed00

0800904c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009050:	f7f7 f92a 	bl	80002a8 <SystemClock_Config>
}
 8009054:	bf00      	nop
 8009056:	bd80      	pop	{r7, pc}

08009058 <__errno>:
 8009058:	4b01      	ldr	r3, [pc, #4]	; (8009060 <__errno+0x8>)
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	20000190 	.word	0x20000190

08009064 <__libc_init_array>:
 8009064:	b570      	push	{r4, r5, r6, lr}
 8009066:	4e0d      	ldr	r6, [pc, #52]	; (800909c <__libc_init_array+0x38>)
 8009068:	4c0d      	ldr	r4, [pc, #52]	; (80090a0 <__libc_init_array+0x3c>)
 800906a:	1ba4      	subs	r4, r4, r6
 800906c:	10a4      	asrs	r4, r4, #2
 800906e:	2500      	movs	r5, #0
 8009070:	42a5      	cmp	r5, r4
 8009072:	d109      	bne.n	8009088 <__libc_init_array+0x24>
 8009074:	4e0b      	ldr	r6, [pc, #44]	; (80090a4 <__libc_init_array+0x40>)
 8009076:	4c0c      	ldr	r4, [pc, #48]	; (80090a8 <__libc_init_array+0x44>)
 8009078:	f000 f8ea 	bl	8009250 <_init>
 800907c:	1ba4      	subs	r4, r4, r6
 800907e:	10a4      	asrs	r4, r4, #2
 8009080:	2500      	movs	r5, #0
 8009082:	42a5      	cmp	r5, r4
 8009084:	d105      	bne.n	8009092 <__libc_init_array+0x2e>
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800908c:	4798      	blx	r3
 800908e:	3501      	adds	r5, #1
 8009090:	e7ee      	b.n	8009070 <__libc_init_array+0xc>
 8009092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009096:	4798      	blx	r3
 8009098:	3501      	adds	r5, #1
 800909a:	e7f2      	b.n	8009082 <__libc_init_array+0x1e>
 800909c:	080092f0 	.word	0x080092f0
 80090a0:	080092f0 	.word	0x080092f0
 80090a4:	080092f0 	.word	0x080092f0
 80090a8:	080092f4 	.word	0x080092f4

080090ac <malloc>:
 80090ac:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <malloc+0xc>)
 80090ae:	4601      	mov	r1, r0
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	f000 b861 	b.w	8009178 <_malloc_r>
 80090b6:	bf00      	nop
 80090b8:	20000190 	.word	0x20000190

080090bc <free>:
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <free+0xc>)
 80090be:	4601      	mov	r1, r0
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f000 b80b 	b.w	80090dc <_free_r>
 80090c6:	bf00      	nop
 80090c8:	20000190 	.word	0x20000190

080090cc <memset>:
 80090cc:	4402      	add	r2, r0
 80090ce:	4603      	mov	r3, r0
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d100      	bne.n	80090d6 <memset+0xa>
 80090d4:	4770      	bx	lr
 80090d6:	f803 1b01 	strb.w	r1, [r3], #1
 80090da:	e7f9      	b.n	80090d0 <memset+0x4>

080090dc <_free_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4605      	mov	r5, r0
 80090e0:	2900      	cmp	r1, #0
 80090e2:	d045      	beq.n	8009170 <_free_r+0x94>
 80090e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090e8:	1f0c      	subs	r4, r1, #4
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	bfb8      	it	lt
 80090ee:	18e4      	addlt	r4, r4, r3
 80090f0:	f000 f8ac 	bl	800924c <__malloc_lock>
 80090f4:	4a1f      	ldr	r2, [pc, #124]	; (8009174 <_free_r+0x98>)
 80090f6:	6813      	ldr	r3, [r2, #0]
 80090f8:	4610      	mov	r0, r2
 80090fa:	b933      	cbnz	r3, 800910a <_free_r+0x2e>
 80090fc:	6063      	str	r3, [r4, #4]
 80090fe:	6014      	str	r4, [r2, #0]
 8009100:	4628      	mov	r0, r5
 8009102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009106:	f000 b8a2 	b.w	800924e <__malloc_unlock>
 800910a:	42a3      	cmp	r3, r4
 800910c:	d90c      	bls.n	8009128 <_free_r+0x4c>
 800910e:	6821      	ldr	r1, [r4, #0]
 8009110:	1862      	adds	r2, r4, r1
 8009112:	4293      	cmp	r3, r2
 8009114:	bf04      	itt	eq
 8009116:	681a      	ldreq	r2, [r3, #0]
 8009118:	685b      	ldreq	r3, [r3, #4]
 800911a:	6063      	str	r3, [r4, #4]
 800911c:	bf04      	itt	eq
 800911e:	1852      	addeq	r2, r2, r1
 8009120:	6022      	streq	r2, [r4, #0]
 8009122:	6004      	str	r4, [r0, #0]
 8009124:	e7ec      	b.n	8009100 <_free_r+0x24>
 8009126:	4613      	mov	r3, r2
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	b10a      	cbz	r2, 8009130 <_free_r+0x54>
 800912c:	42a2      	cmp	r2, r4
 800912e:	d9fa      	bls.n	8009126 <_free_r+0x4a>
 8009130:	6819      	ldr	r1, [r3, #0]
 8009132:	1858      	adds	r0, r3, r1
 8009134:	42a0      	cmp	r0, r4
 8009136:	d10b      	bne.n	8009150 <_free_r+0x74>
 8009138:	6820      	ldr	r0, [r4, #0]
 800913a:	4401      	add	r1, r0
 800913c:	1858      	adds	r0, r3, r1
 800913e:	4282      	cmp	r2, r0
 8009140:	6019      	str	r1, [r3, #0]
 8009142:	d1dd      	bne.n	8009100 <_free_r+0x24>
 8009144:	6810      	ldr	r0, [r2, #0]
 8009146:	6852      	ldr	r2, [r2, #4]
 8009148:	605a      	str	r2, [r3, #4]
 800914a:	4401      	add	r1, r0
 800914c:	6019      	str	r1, [r3, #0]
 800914e:	e7d7      	b.n	8009100 <_free_r+0x24>
 8009150:	d902      	bls.n	8009158 <_free_r+0x7c>
 8009152:	230c      	movs	r3, #12
 8009154:	602b      	str	r3, [r5, #0]
 8009156:	e7d3      	b.n	8009100 <_free_r+0x24>
 8009158:	6820      	ldr	r0, [r4, #0]
 800915a:	1821      	adds	r1, r4, r0
 800915c:	428a      	cmp	r2, r1
 800915e:	bf04      	itt	eq
 8009160:	6811      	ldreq	r1, [r2, #0]
 8009162:	6852      	ldreq	r2, [r2, #4]
 8009164:	6062      	str	r2, [r4, #4]
 8009166:	bf04      	itt	eq
 8009168:	1809      	addeq	r1, r1, r0
 800916a:	6021      	streq	r1, [r4, #0]
 800916c:	605c      	str	r4, [r3, #4]
 800916e:	e7c7      	b.n	8009100 <_free_r+0x24>
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	20000218 	.word	0x20000218

08009178 <_malloc_r>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	1ccd      	adds	r5, r1, #3
 800917c:	f025 0503 	bic.w	r5, r5, #3
 8009180:	3508      	adds	r5, #8
 8009182:	2d0c      	cmp	r5, #12
 8009184:	bf38      	it	cc
 8009186:	250c      	movcc	r5, #12
 8009188:	2d00      	cmp	r5, #0
 800918a:	4606      	mov	r6, r0
 800918c:	db01      	blt.n	8009192 <_malloc_r+0x1a>
 800918e:	42a9      	cmp	r1, r5
 8009190:	d903      	bls.n	800919a <_malloc_r+0x22>
 8009192:	230c      	movs	r3, #12
 8009194:	6033      	str	r3, [r6, #0]
 8009196:	2000      	movs	r0, #0
 8009198:	bd70      	pop	{r4, r5, r6, pc}
 800919a:	f000 f857 	bl	800924c <__malloc_lock>
 800919e:	4a21      	ldr	r2, [pc, #132]	; (8009224 <_malloc_r+0xac>)
 80091a0:	6814      	ldr	r4, [r2, #0]
 80091a2:	4621      	mov	r1, r4
 80091a4:	b991      	cbnz	r1, 80091cc <_malloc_r+0x54>
 80091a6:	4c20      	ldr	r4, [pc, #128]	; (8009228 <_malloc_r+0xb0>)
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	b91b      	cbnz	r3, 80091b4 <_malloc_r+0x3c>
 80091ac:	4630      	mov	r0, r6
 80091ae:	f000 f83d 	bl	800922c <_sbrk_r>
 80091b2:	6020      	str	r0, [r4, #0]
 80091b4:	4629      	mov	r1, r5
 80091b6:	4630      	mov	r0, r6
 80091b8:	f000 f838 	bl	800922c <_sbrk_r>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d124      	bne.n	800920a <_malloc_r+0x92>
 80091c0:	230c      	movs	r3, #12
 80091c2:	6033      	str	r3, [r6, #0]
 80091c4:	4630      	mov	r0, r6
 80091c6:	f000 f842 	bl	800924e <__malloc_unlock>
 80091ca:	e7e4      	b.n	8009196 <_malloc_r+0x1e>
 80091cc:	680b      	ldr	r3, [r1, #0]
 80091ce:	1b5b      	subs	r3, r3, r5
 80091d0:	d418      	bmi.n	8009204 <_malloc_r+0x8c>
 80091d2:	2b0b      	cmp	r3, #11
 80091d4:	d90f      	bls.n	80091f6 <_malloc_r+0x7e>
 80091d6:	600b      	str	r3, [r1, #0]
 80091d8:	50cd      	str	r5, [r1, r3]
 80091da:	18cc      	adds	r4, r1, r3
 80091dc:	4630      	mov	r0, r6
 80091de:	f000 f836 	bl	800924e <__malloc_unlock>
 80091e2:	f104 000b 	add.w	r0, r4, #11
 80091e6:	1d23      	adds	r3, r4, #4
 80091e8:	f020 0007 	bic.w	r0, r0, #7
 80091ec:	1ac3      	subs	r3, r0, r3
 80091ee:	d0d3      	beq.n	8009198 <_malloc_r+0x20>
 80091f0:	425a      	negs	r2, r3
 80091f2:	50e2      	str	r2, [r4, r3]
 80091f4:	e7d0      	b.n	8009198 <_malloc_r+0x20>
 80091f6:	428c      	cmp	r4, r1
 80091f8:	684b      	ldr	r3, [r1, #4]
 80091fa:	bf16      	itet	ne
 80091fc:	6063      	strne	r3, [r4, #4]
 80091fe:	6013      	streq	r3, [r2, #0]
 8009200:	460c      	movne	r4, r1
 8009202:	e7eb      	b.n	80091dc <_malloc_r+0x64>
 8009204:	460c      	mov	r4, r1
 8009206:	6849      	ldr	r1, [r1, #4]
 8009208:	e7cc      	b.n	80091a4 <_malloc_r+0x2c>
 800920a:	1cc4      	adds	r4, r0, #3
 800920c:	f024 0403 	bic.w	r4, r4, #3
 8009210:	42a0      	cmp	r0, r4
 8009212:	d005      	beq.n	8009220 <_malloc_r+0xa8>
 8009214:	1a21      	subs	r1, r4, r0
 8009216:	4630      	mov	r0, r6
 8009218:	f000 f808 	bl	800922c <_sbrk_r>
 800921c:	3001      	adds	r0, #1
 800921e:	d0cf      	beq.n	80091c0 <_malloc_r+0x48>
 8009220:	6025      	str	r5, [r4, #0]
 8009222:	e7db      	b.n	80091dc <_malloc_r+0x64>
 8009224:	20000218 	.word	0x20000218
 8009228:	2000021c 	.word	0x2000021c

0800922c <_sbrk_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4c06      	ldr	r4, [pc, #24]	; (8009248 <_sbrk_r+0x1c>)
 8009230:	2300      	movs	r3, #0
 8009232:	4605      	mov	r5, r0
 8009234:	4608      	mov	r0, r1
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	f7f7 fadc 	bl	80007f4 <_sbrk>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d102      	bne.n	8009246 <_sbrk_r+0x1a>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	b103      	cbz	r3, 8009246 <_sbrk_r+0x1a>
 8009244:	602b      	str	r3, [r5, #0]
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	20001254 	.word	0x20001254

0800924c <__malloc_lock>:
 800924c:	4770      	bx	lr

0800924e <__malloc_unlock>:
 800924e:	4770      	bx	lr

08009250 <_init>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr

0800925c <_fini>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	bf00      	nop
 8009260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009262:	bc08      	pop	{r3}
 8009264:	469e      	mov	lr, r3
 8009266:	4770      	bx	lr
